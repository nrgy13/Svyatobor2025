#!/usr/bin/env node

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏ test –≤ Supabase
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

class TestFolderChecker {
  constructor() {
    this.supabase = null;
    this.bucketName = 'images';
  }

  initializeSupabase() {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const anonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

    if (!supabaseUrl || !anonKey) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: NEXT_PUBLIC_SUPABASE_URL –∏ NEXT_PUBLIC_SUPABASE_ANON_KEY');
    }

    this.supabase = createClient(supabaseUrl, anonKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  async checkTestFolder() {
    console.log(`üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏ 'test'...`);

    try {
      const { data, error } = await this.supabase.storage
        .from(this.bucketName)
        .list('test', {
          limit: 1000
        });

      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:`, error.message);
        return;
      }

      console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${data.length}`);

      if (data.length === 0) {
        console.log(`üì≠ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞`);
      } else {
        data.forEach(file => {
          console.log(`  üìÑ ${file.name}`);
          console.log(`     –†–∞–∑–º–µ—Ä: ${file.metadata?.size || 0} –±–∞–π—Ç`);
          console.log(`     –¢–∏–ø: ${file.metadata?.mimetype || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`);
          console.log(`     –°–æ–∑–¥–∞–Ω: ${file.created_at}`);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
          const { data: publicUrlData } = this.supabase.storage
            .from(this.bucketName)
            .getPublicUrl(`test/${file.name}`);

          console.log(`     –ü—É–±–ª–∏—á–Ω—ã–π URL: ${publicUrlData.publicUrl}`);
          console.log('');
        });
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–∫–∏:`, error.message);
    }
  }

  async run() {
    try {
      this.initializeSupabase();
      await this.checkTestFolder();
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
const checker = new TestFolderChecker();
checker.run().catch(console.error);