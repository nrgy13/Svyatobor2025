#!/usr/bin/env node

/**
 * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Supabase –±–∞–∫–µ—Ç–∞
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

class SupabaseStructureDebugger {
  constructor() {
    this.supabase = null;
    this.bucketName = 'images';
  }

  initializeSupabase() {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

    if (!supabaseUrl || !supabaseKey) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: NEXT_PUBLIC_SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY');
    }

    this.supabase = createClient(supabaseUrl, supabaseKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  async listAllFiles() {
    console.log(`üìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• —Ñ–∞–π–ª–æ–≤ –∏–∑ –±–∞–∫–µ—Ç–∞ '${this.bucketName}'...`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
      const { data, error } = await this.supabase.storage
        .from(this.bucketName)
        .list('', {
          limit: 10000, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
          sortBy: { column: 'name', order: 'asc' }
        });

      if (error) {
        throw error;
      }

      console.log(`\nüìÑ –ù–∞–π–¥–µ–Ω–æ ${data.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:`);
      console.log('=' .repeat(80));

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø—É—Ç—è–º
      const filesByPath = {};
      const folders = new Set();

      data.forEach(file => {
        console.log(`${file.name} | –†–∞–∑–º–µ—Ä: ${file.metadata?.size || 0} | –°–æ–∑–¥–∞–Ω: ${file.created_at}`);

        if (file.name.includes('/')) {
          const folder = file.name.split('/')[0];
          folders.add(folder);

          if (!filesByPath[folder]) {
            filesByPath[folder] = [];
          }
          filesByPath[folder].push(file.name);
        } else {
          // –§–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
          if (!filesByPath['root']) {
            filesByPath['root'] = [];
          }
          filesByPath['root'].push(file.name);
        }
      });

      console.log('\nüìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫:');
      console.log('=' .repeat(80));

      Object.entries(filesByPath).forEach(([path, files]) => {
        if (path === 'root') {
          console.log(`–ö–æ—Ä–µ–Ω—å (${files.length} —Ñ–∞–π–ª–æ–≤):`);
          files.forEach(file => console.log(`  ${file}`));
        } else {
          console.log(`${path}/ (${files.length} —Ñ–∞–π–ª–æ–≤):`);
          files.forEach(file => console.log(`  ${file}`));
        }
      });

      console.log(`\nüìä –ò—Ç–æ–≥–æ –ø–∞–ø–æ–∫: ${folders.size}`);
      console.log(`üìÑ –ò—Ç–æ–≥–æ —Ñ–∞–π–ª–æ–≤: ${data.length}`);

      return { data, folders: Array.from(folders), filesByPath };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∫–µ—Ç–∞:`, error.message);
      return { data: [], folders: [], filesByPath: {} };
    }
  }

  async checkSpecificPaths() {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—É—Ç–µ–π...');

    const testPaths = [
      'logos/logo.png',
      'backgrounds/hero-bg.jpg',
      'services/service-trees.jpg',
      'logos/.keep',
      'backgrounds/.keep'
    ];

    for (const path of testPaths) {
      try {
        const { data } = this.supabase.storage
          .from(this.bucketName)
          .getPublicUrl(path);

        console.log(`\n–ü—É—Ç—å: ${path}`);
        console.log(`Public URL: ${data.publicUrl}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        const response = await fetch(data.publicUrl, { method: 'HEAD' });
        console.log(`–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${response.ok ? '‚úÖ' : '‚ùå'} (${response.status})`);

      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${path}: ${error.message}`);
      }
    }
  }

  async run() {
    try {
      this.initializeSupabase();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∫–µ—Ç
      const { data: buckets } = await this.supabase.storage.listBuckets();
      const bucket = buckets.find(b => b.name === this.bucketName);

      if (bucket) {
        console.log(`‚úÖ –ë–∞–∫–µ—Ç –Ω–∞–π–¥–µ–Ω: ${bucket.name}`);
        console.log(`   –ü—É–±–ª–∏—á–Ω—ã–π: ${bucket.public}`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${bucket.created_at}`);
      } else {
        console.log(`‚ùå –ë–∞–∫–µ—Ç '${this.bucketName}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }

      // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      const { data, folders, filesByPath } = await this.listAllFiles();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
      await this.checkSpecificPaths();

      console.log('\nüéØ –†–ï–ó–Æ–ú–ï:');
      console.log(`–ü–∞–ø–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${folders.length}`);
      console.log(`–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${data.length}`);

      if (folders.length > 0) {
        console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏:');
        folders.forEach(folder => console.log(`  - ${folder}`));
      }

      return { data, folders, filesByPath };

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏
const debuggerTool = new SupabaseStructureDebugger();
debuggerTool.run().catch(console.error);