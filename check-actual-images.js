#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–∞—Ö Supabase
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

class ImageChecker {
  constructor() {
    this.supabase = null;
    this.bucketName = 'images';
  }

  initializeSupabase() {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

    if (!supabaseUrl || !supabaseKey) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: NEXT_PUBLIC_SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY');
    }

    this.supabase = createClient(supabaseUrl, supabaseKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  async checkFolderContents(folder) {
    console.log(`\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏: ${folder}`);

    try {
      const { data, error } = await this.supabase.storage
        .from(this.bucketName)
        .list(folder, {
          limit: 100,
          sortBy: { column: 'name', order: 'asc' }
        });

      if (error) {
        throw error;
      }

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${data.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ ${folder}:`);

      if (data.length === 0) {
        console.log('  ‚ùå –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞');
        return [];
      }

      data.forEach(file => {
        const size = file.metadata?.size || 0;
        const isKeepFile = file.name === '.keep';
        console.log(`  ${file.name} | –†–∞–∑–º–µ—Ä: ${size} –±–∞–π—Ç | ${isKeepFile ? 'üìÅ –ü–∞–ø–∫–∞' : 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}`);
      });

      return data;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–∫–∏ ${folder}:`, error.message);
      return [];
    }
  }

  async checkAllFolders() {
    const folders = ['logos', 'backgrounds', 'sections', 'services', 'clients', 'elements'];

    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –≤ –±–∞–∫–µ—Ç–µ...\n');

    for (const folder of folders) {
      await this.checkFolderContents(folder);
    }
  }

  async run() {
    try {
      this.initializeSupabase();

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ—Ä–Ω–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å
      console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –±–∞–∫–µ—Ç–∞...');
      const { data: rootFiles } = await this.supabase.storage
        .from(this.bucketName)
        .list('', { limit: 100 });

      console.log(`–ö–æ—Ä–Ω–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${rootFiles.length}`);

      // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∂–¥—É—é –ø–∞–ø–∫—É
      await this.checkAllFolders();

      console.log('\nüéØ –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
      console.log('–ü—Ä–æ–±–ª–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: –ø–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã, –Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏');

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
const checker = new ImageChecker();
checker.run().catch(console.error);