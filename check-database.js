// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ contact_submissions
import { createClient } from '@supabase/supabase-js';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á—Ç–æ –∏ –≤ API
const supabaseUrl = 'https://bvuagbjdedtfmvitrfpa.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ2dWFnYmpkZWR0Zm12aXRyZnBhIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MDQ0ODI4MSwiZXhwIjoyMDc2MDI0MjgxfQ.RYhDzxaQf76g-ndAi7sv_ideQADFTZP_Nm24nsqQ3kk';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkDatabase() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ contact_submissions...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    const { data, error } = await supabase
      .from('contact_submissions')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      return;
    }

    console.log('üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', data.length);
    console.log('üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:');

    data.forEach((record, index) => {
      console.log(`\n--- –ó–∞–ø–∏—Å—å ${index + 1} ---`);
      console.log('üÜî ID:', record.id);
      console.log('üë§ –ò–º—è:', record.name);
      console.log('üìû –¢–µ–ª–µ—Ñ–æ–Ω:', record.phone);
      console.log('‚è∞ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è:', record.preferred_time);
      console.log('üìÖ –°–æ–∑–¥–∞–Ω–æ:', record.created_at);
      console.log('üìä –°—Ç–∞—Ç—É—Å:', record.status);
    });

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∏—â–µ–º –Ω–∞—à—É —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const testRecord = data.find(record => record.phone === '+79991234567');
    if (testRecord) {
      console.log('\nüéØ –ù–∞–π–¥–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å:');
      console.log(JSON.stringify(testRecord, null, 2));
    } else {
      console.log('\n‚ùå –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

checkDatabase();