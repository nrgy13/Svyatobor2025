const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

async function simpleTest() {
  console.log('üîç –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Supabase...');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
    console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }

  console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  );

  console.log('üîó –ö–ª–∏–µ–Ω—Ç Supabase —Å–æ–∑–¥–∞–Ω');

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–ï–ó –ø–æ–ª—è preferredTime
  const testData = {
    name: "–¢–µ—Å—Ç",
    phone: "+79999999999"
  };

  console.log('üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', testData);

  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏
    const { data, error } = await supabase
      .from('contact_submissions')
      .insert([testData])
      .select();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏:', error.message);
      console.error('üìã –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
      console.error('üìã –î–µ—Ç–∞–ª–∏:', error.details);
      return;
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã!');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', data);

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (data && data.length > 0) {
      console.log('üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      const { error: deleteError } = await supabase
        .from('contact_submissions')
        .delete()
        .eq('phone', testData.phone);

      if (deleteError) {
        console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', deleteError.message);
      } else {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
      }
    }

  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

simpleTest();