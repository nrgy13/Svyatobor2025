#!/usr/bin/env node

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –±–∞–∫–µ—Ç–∞ Supabase
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

class SupabaseRootChecker {
  constructor() {
    this.supabase = null;
    this.bucketName = 'images';
  }

  initializeSupabase() {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

    if (!supabaseUrl || !supabaseKey) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: NEXT_PUBLIC_SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY');
    }

    this.supabase = createClient(supabaseUrl, supabaseKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  async checkRootBucket() {
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –±–∞–∫–µ—Ç–∞: ${this.bucketName}`);

    try {
      const { data, error } = await this.supabase.storage
        .from(this.bucketName)
        .list('', {
          limit: 1000,
          sortBy: { column: 'name', order: 'asc' }
        });

      if (error) {
        throw error;
      }

      console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ ${data.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ—Ä–Ω–µ –±–∞–∫–µ—Ç–∞:`);

      if (data.length === 0) {
        console.log('‚ùå –ë–∞–∫–µ—Ç –ø—É—Å—Ç');
        return [];
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ç–∏–ø–∞–º
      const files = data.filter(item => item.metadata && item.metadata.mimetype);
      const folders = data.filter(item => !item.metadata || !item.metadata.mimetype);

      console.log(`\nüìÅ –ü–∞–ø–∫–∏ (${folders.length}):`);
      folders.forEach(folder => {
        console.log(`   üìÇ ${folder.name}`);
      });

      console.log(`\nüñºÔ∏è –§–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (${files.length}):`);
      files.forEach(file => {
        const size = file.metadata?.size || 0;
        const sizeMB = (size / (1024 * 1024)).toFixed(2);
        console.log(`   üñºÔ∏è ${file.name} | –†–∞–∑–º–µ—Ä: ${sizeMB} MB | –¢–∏–ø: ${file.metadata.mimetype}`);
      });

      return data;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∫–µ—Ç–∞:`, error.message);
      return [];
    }
  }

  async run() {
    try {
      this.initializeSupabase();
      await this.checkRootBucket();

      console.log('\nüéØ –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
      console.log('–ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ—Ä–Ω–µ –±–∞–∫–µ—Ç–∞, –∏—Ö –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏');
      console.log('–∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å URL –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞—Ö –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ñ–∞–π–ª–æ–≤');

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
const checker = new SupabaseRootChecker();
checker.run().catch(console.error);