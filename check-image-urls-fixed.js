#!/usr/bin/env node

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ñ–∞–π–ª–æ–≤ –≤ Supabase
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
 */

import { createClient } from '@supabase/supabase-js';
import https from 'https';
import http from 'http';
import dotenv from 'dotenv';

dotenv.config();

class ImageURLChecker {
  constructor() {
    this.supabase = null;
    this.bucketName = 'images';
    this.images = null;
    this.results = {
      total: 0,
      accessible: 0,
      notAccessible: 0,
      inSupabase: 0,
      notInSupabase: 0,
      errors: []
    };
  }

  initializeSupabase() {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

    if (!supabaseUrl || !supabaseKey) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: NEXT_PUBLIC_SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY');
    }

    this.supabase = createClient(supabaseUrl, supabaseKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  loadImageConstants() {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ constants.ts
    this.images = {
      LOGO: "https://bvuagbjdedtfmvitrfpa.supabase.co/storage/v1/object/public/images/logos/logo.png",
      LOGO_CIRCLE: "https://bvuagbjdedtfmvitrfpa.supabase.co/storage/v1/object/public/images/logos/logo-circle.png",
      HERO_BG: "https://bvuagbjdedtfmvitrfpa.supabase.co/storage/v1/object/public/images/backgrounds/hero-bg.jpg",
      RESULT_BG: "https://bvuagbjdedtfmvitrfpa.supabase.co/storage/v1/object/public/images/backgrounds/result-bg.jpg",
      ADVANTAGES_IMAGE: "https://bvuagbjdedtfmvitrfpa.supabase.co/storage/v1/object/public/images/sections/advantages-image.jpg",
      PROBLEM_IMAGE: "https://bvuagbjdedtfmvitrfpa.supabase.co/storage/v1/object/public/images/sections/problem-image.jpg",
      SERVICE_TREES: "https://bvuagbjdedtfmvitrfpa.supabase.co/storage/v1/object/public/images/services/service-trees.jpg",
      SERVICE_GRASS: "https://bvuagbjdedtfmvitrfpa.supabase.co/storage/v1/object/public/images/services/service-grass.jpg",
      SERVICE_SPRAYING: "https://bvuagbjdedtfmvitrfpa.supabase.co/storage/v1/object/public/images/services/service-spraying.jpg",
      SERVICE_REMOVAL: "https://bvuagbjdedtfmvitrfpa.supabase.co/storage/v1/object/public/images/services/service-removal.jpg",
      SERVICE_CONSTRUCTION: "https://bvuagbjdedtfmvitrfpa.supabase.co/storage/v1/object/public/images/services/service-construction.jpg",
      CLIENT_1: "https://bvuagbjdedtfmvitrfpa.supabase.co/storage/v1/object/public/images/clients/client-1.jpg",
      CLIENT_2: "https://bvuagbjdedtfmvitrfpa.supabase.co/storage/v1/object/public/images/clients/client-2.jpg",
      CLIENT_3: "https://bvuagbjdedtfmvitrfpa.supabase.co/storage/v1/object/public/images/clients/client-3.jpg",
      ELEMENT: "https://bvuagbjdedtfmvitrfpa.supabase.co/storage/v1/object/public/images/elements/element.png",
      RED_FLORAL_ORNAMENT_WHITE_BACKGROUND_EMBROIDERY: "https://bvuagbjdedtfmvitrfpa.supabase.co/storage/v1/object/public/images/elements/red-floral-ornament-white-background-embroidery.png",
    };

    this.results.total = Object.keys(this.images).length;
    console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.results.total} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL
  async checkURLAccessibility(url, name) {
    return new Promise((resolve) => {
      const protocol = url.startsWith('https') ? https : http;

      const req = protocol.request(url, { method: 'HEAD' }, (res) => {
        const status = res.statusCode;
        const isAccessible = status >= 200 && status < 400;

        resolve({
          name,
          url,
          status,
          accessible: isAccessible,
          error: null
        });
      });

      req.on('error', (err) => {
        resolve({
          name,
          url,
          status: null,
          accessible: false,
          error: err.message
        });
      });

      req.setTimeout(10000, () => {
        req.destroy();
        resolve({
          name,
          url,
          status: null,
          accessible: false,
          error: 'Timeout'
        });
      });

      req.end();
    });
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞ –∏–∑ URL
  extractFilePath(url) {
    const baseUrl = 'https://bvuagbjdedtfmvitrfpa.supabase.co/storage/v1/object/public/';
    if (url.startsWith(baseUrl)) {
      return url.substring(baseUrl.length);
    }
    return null;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ Supabase (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
  async checkFileInSupabase(filePath) {
    try {
      // –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ –ø–∞–ø–∫—É –∏ –∏–º—è —Ñ–∞–π–ª–∞
      const pathParts = filePath.split('/');
      const fileName = pathParts.pop();
      const folderPath = pathParts.join('/');

      console.log(`   üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞: ${fileName} –≤ –ø–∞–ø–∫–µ: ${folderPath || '–∫–æ—Ä–µ–Ω—å'}`);

      const { data, error } = await this.supabase.storage
        .from(this.bucketName)
        .list(folderPath || '', {
          limit: 1000
        });

      if (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`);
        return { exists: false, error: error.message };
      }

      console.log(`   üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: ${data.length}`);

      // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      const fileExists = data.some(file => file.name === fileName);

      if (fileExists) {
        const foundFile = data.find(file => file.name === fileName);
        console.log(`   ‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${fileName} (${foundFile.metadata?.size || 0} –±–∞–π—Ç)`);
      } else {
        console.log(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã: ${data.map(f => f.name).join(', ')}`);
      }

      return { exists: fileExists, error: null };
    } catch (error) {
      console.log(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
      return { exists: false, error: error.message };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  async checkAllImages() {
    console.log('\nüîç –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');

    for (const [name, url] of Object.entries(this.images)) {
      console.log(`\nüì∑ –ü—Ä–æ–≤–µ—Ä–∫–∞: ${name}`);
      console.log(`   URL: ${url}`);

      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL
      const urlCheck = await this.checkURLAccessibility(url, name);

      if (urlCheck.accessible) {
        this.results.accessible++;
        console.log(`   ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω (HTTP ${urlCheck.status})`);
      } else {
        this.results.notAccessible++;
        this.results.errors.push({
          name,
          url,
          type: 'URL_ACCESS',
          error: urlCheck.error || `HTTP ${urlCheck.status}`
        });
        console.log(`   ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${urlCheck.error || `HTTP ${urlCheck.status}`})`);
      }

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤ Supabase
      const filePath = this.extractFilePath(url);
      if (filePath) {
        const supabaseCheck = await this.checkFileInSupabase(filePath);

        if (supabaseCheck.exists) {
          this.results.inSupabase++;
          console.log(`   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Supabase`);
        } else {
          this.results.notInSupabase++;
          this.results.errors.push({
            name,
            url,
            type: 'SUPABASE_FILE',
            error: supabaseCheck.error || '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∫–µ—Ç–µ'
          });
          console.log(`   ‚ùå –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Supabase (${supabaseCheck.error || '–Ω–µ –Ω–∞–π–¥–µ–Ω'})`);
        }
      } else {
        this.results.errors.push({
          name,
          url,
          type: 'INVALID_URL',
          error: '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –ø—É—Ç—å —Ñ–∞–π–ª–∞ –∏–∑ URL'
        });
        console.log(`   ‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –ø—É—Ç—å —Ñ–∞–π–ª–∞ –∏–∑ URL`);
      }
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  generateReport() {
    console.log('\n' + '='.repeat(80));
    console.log('üìä –û–¢–ß–ï–¢ –û –ü–†–û–í–ï–†–ö–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô');
    console.log('='.repeat(80));

    console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`   –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${this.results.total}`);
    console.log(`   –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ URL: ${this.results.accessible}`);
    console.log(`   –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ URL: ${this.results.notAccessible}`);
    console.log(`   –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤ Supabase: ${this.results.inSupabase}`);
    console.log(`   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ Supabase: ${this.results.notInSupabase}`);

    if (this.results.errors.length > 0) {
      console.log(`\n‚ùå –ü–†–û–ë–õ–ï–ú–´ (${this.results.errors.length}):`);

      const errorsByType = this.results.errors.reduce((acc, error) => {
        acc[error.type] = (acc[error.type] || 0) + 1;
        return acc;
      }, {});

      Object.entries(errorsByType).forEach(([type, count]) => {
        const typeNames = {
          'URL_ACCESS': '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é URL',
          'SUPABASE_FILE': '–§–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ Supabase',
          'INVALID_URL': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL'
        };
        console.log(`   ${typeNames[type] || type}: ${count}`);
      });

      console.log(`\nüìã –ü–û–î–†–û–ë–ù–´–ô –°–ü–ò–°–û–ö –ü–†–û–ë–õ–ï–ú:`);
      this.results.errors.forEach((error, index) => {
        console.log(`   ${index + 1}. ${error.name}`);
        console.log(`      URL: ${error.url}`);
        console.log(`      –¢–∏–ø: ${error.type}`);
        console.log(`      –û—à–∏–±–∫–∞: ${error.error}`);
      });
    }

    console.log(`\n‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
    if (this.results.notAccessible > 0) {
      console.log(`   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase Storage`);
    }
    if (this.results.notInSupabase > 0) {
      console.log(`   - –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏ Supabase`);
      console.log(`   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏`);
    }
    if (this.results.accessible === this.results.total && this.results.inSupabase === this.results.total) {
      console.log(`   üéâ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã!`);
    }

    console.log('\n' + '='.repeat(80));
  }

  async run() {
    try {
      this.initializeSupabase();
      this.loadImageConstants();
      await this.checkAllImages();
      this.generateReport();

      // –í–æ–∑–≤—Ä–∞—Ç –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞ –¥–ª—è CI/CD
      const hasErrors = this.results.errors.length > 0;
      process.exit(hasErrors ? 1 : 0);

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
const checker = new ImageURLChecker();
checker.run().catch(console.error);