#!/usr/bin/env node

/**
 * –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Supabase –±–∞–∫–µ—Ç–∞
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

class DetailedStructureChecker {
  constructor() {
    this.supabase = null;
    this.bucketName = 'images';
  }

  initializeSupabase() {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const anonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

    if (!supabaseUrl || !anonKey) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: NEXT_PUBLIC_SUPABASE_URL –∏ NEXT_PUBLIC_SUPABASE_ANON_KEY');
    }

    this.supabase = createClient(supabaseUrl, anonKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  async checkAllFolders() {
    const folders = ['logos', 'backgrounds', 'sections', 'services', 'clients', 'elements'];

    console.log(`üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –≤ –±–∞–∫–µ—Ç–µ '${this.bucketName}'...\n`);

    for (const folder of folders) {
      console.log(`üìÇ –ü–∞–ø–∫–∞: ${folder}/`);
      console.log('‚îÄ'.repeat(50));

      try {
        const { data, error } = await this.supabase.storage
          .from(this.bucketName)
          .list(folder, {
            limit: 1000,
            sortBy: { column: 'name', order: 'asc' }
          });

        if (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: ${error.message}`);
        } else {
          if (data.length === 0) {
            console.log(`üì≠ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞`);
          } else {
            data.forEach(file => {
              console.log(`  üìÑ ${file.name}`);
              console.log(`     –†–∞–∑–º–µ—Ä: ${file.metadata?.size || 0} –±–∞–π—Ç`);
              console.log(`     –¢–∏–ø: ${file.metadata?.mimetype || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`);
              console.log(`     –°–æ–∑–¥–∞–Ω: ${file.created_at}`);
              console.log('');
            });
          }
        }
      } catch (error) {
        console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
      }

      console.log('');
    }
  }

  async checkSpecificFiles() {
    const filesToCheck = [
      'logos/logo.png',
      'logos/logo-circle.png',
      'backgrounds/hero-bg.jpg',
      'backgrounds/result-bg.jpg',
      'sections/advantages-image.jpg',
      'sections/problem-image.jpg',
      'services/service-trees.jpg',
      'services/service-grass.jpg',
      'services/service-spraying.jpg',
      'services/service-removal.jpg',
      'services/service-construction.jpg',
      'clients/client-1.jpg',
      'clients/client-2.jpg',
      'clients/client-3.jpg',
      'elements/element.png',
      'elements/red-floral-ornament-white-background-embroidery.png'
    ];

    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...\n');

    for (const filePath of filesToCheck) {
      try {
        const { data } = this.supabase.storage
          .from(this.bucketName)
          .getPublicUrl(filePath);

        console.log(`–§–∞–π–ª: ${filePath}`);
        console.log(`URL: ${data.publicUrl}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        const response = await fetch(data.publicUrl, { method: 'HEAD' });
        console.log(`–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${response.ok ? '‚úÖ' : '‚ùå'} (${response.status})`);

        if (response.ok) {
          console.log(`–†–∞–∑–º–µ—Ä: ${response.headers.get('content-length') || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'} –±–∞–π—Ç`);
          console.log(`–¢–∏–ø: ${response.headers.get('content-type') || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`);
        }

        console.log('');
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${filePath}: ${error.message}\n`);
      }
    }
  }

  async run() {
    try {
      this.initializeSupabase();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∫–µ—Ç
      const { data: buckets } = await this.supabase.storage.listBuckets();
      const bucket = buckets.find(b => b.name === this.bucketName);

      if (bucket) {
        console.log(`‚úÖ –ë–∞–∫–µ—Ç –Ω–∞–π–¥–µ–Ω: ${bucket.name}`);
        console.log(`   –ü—É–±–ª–∏—á–Ω—ã–π: ${bucket.public}`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${bucket.created_at}\n`);
      } else {
        console.log(`‚ùå –ë–∞–∫–µ—Ç '${this.bucketName}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }

      // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–æ–∫
      await this.checkAllFolders();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      await this.checkSpecificFiles();

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
const checker = new DetailedStructureChecker();
checker.run().catch(console.error);