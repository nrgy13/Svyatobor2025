const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º—ã
const testFormData = {
  name: "–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤",
  phone: "+7 (999) 999-99-99",
  preferredTime: "—Å 10:00 –¥–æ 18:00"
};

async function testSupabaseConnection() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.NEXT_PUBLIC_SUPABASE_URL) {
    console.error('‚ùå –û—à–∏–±–∫–∞: NEXT_PUBLIC_SUPABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ');
    return;
  }

  if (!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
    console.error('‚ùå –û—à–∏–±–∫–∞: NEXT_PUBLIC_SUPABASE_ANON_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ');
    return;
  }

  console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã');
  console.log('üì° URL:', process.env.NEXT_PUBLIC_SUPABASE_URL);

  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    );

    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Å–æ–∑–¥–∞–Ω–æ');

    // –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const { data: healthData, error: healthError } = await supabase
      .from('contact_submissions')
      .select('count', { count: 'exact', head: true });

    if (healthError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ contact_submissions:', healthError.message);
      console.error('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.error('   - –¢–∞–±–ª–∏—Ü–∞ contact_submissions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.error('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ RLS (Row Level Security)');
      console.error('   - –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π');
      return;
    }

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ contact_submissions —É—Å–ø–µ—à–Ω–æ');

    // –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    console.log('üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');
    const { data, error } = await supabase
      .from('contact_submissions')
      .insert([testFormData])
      .select();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(error, null, 2));

      if (error.code === 'PGRST116') {
        console.error('üí° –¢–∞–±–ª–∏—Ü–∞ contact_submissions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      } else if (error.code === '42501') {
        console.error('üí° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (RLS –ø–æ–ª–∏—Ç–∏–∫–∏)');
      } else if (error.code === '23505') {
        console.error('üí° –ù–∞—Ä—É—à–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è');
      }

      return;
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã!');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(data, null, 2));

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (data && data.length > 0) {
      console.log('üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      const { error: deleteError } = await supabase
        .from('contact_submissions')
        .delete()
        .eq('phone', testFormData.phone);

      if (deleteError) {
        console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', deleteError.message);
      } else {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
      }
    }

  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('üìã –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testSupabaseConnection();