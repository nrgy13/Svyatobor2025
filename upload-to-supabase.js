#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ images/ –≤ Supabase Storage
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node upload-to-supabase.js
 *
 * –¢—Ä–µ–±—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
 * - NEXT_PUBLIC_SUPABASE_URL
 * - SUPABASE_SERVICE_ROLE_KEY (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤)
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
const IMAGES_TO_UPLOAD = [
  // –õ–æ–≥–æ—Ç–∏–ø—ã
  { name: 'logo.png', folder: 'logos' },
  { name: 'logo-circle.png', folder: 'logos' },

  // –§–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  { name: 'hero-bg.jpg', folder: 'backgrounds' },
  { name: 'result-bg.jpg', folder: 'backgrounds' },

  // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π
  { name: 'advantages-image.jpg', folder: 'sections' },
  { name: 'problem-image.jpg', folder: 'sections' },

  // –°–µ—Ä–≤–∏—Å—ã
  { name: 'service-trees.jpg', folder: 'services' },
  { name: 'service-grass.jpg', folder: 'services' },
  { name: 'service-spraying.jpg', folder: 'services' },
  { name: 'service-removal.jpg', folder: 'services' },
  { name: 'service-construction.jpg', folder: 'services' },

  // –ö–ª–∏–µ–Ω—Ç—ã
  { name: 'client-1.jpg', folder: 'clients' },
  { name: 'client-2.jpg', folder: 'clients' },
  { name: 'client-3.jpg', folder: 'clients' },

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  { name: 'element.png', folder: 'elements' },
  { name: 'red-floral-ornament-white-background-embroidery.png', folder: 'elements' }
];

// –¶–≤–µ—Ç–∞ –¥–ª—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
const PLACEHOLDER_COLORS = {
  'logo-circle.png': '#4A90E2',
  'service-trees.jpg': '#228B22',
  'service-grass.jpg': '#32CD32',
  'service-spraying.jpg': '#4169E1',
  'service-removal.jpg': '#8B4513',
  'service-construction.jpg': '#FFD700',
  'client-1.jpg': '#FF69B4',
  'client-2.jpg': '#00CED1',
  'client-3.jpg': '#FF6347',
  'element.png': '#9370DB',
  'red-floral-ornament-white-background-embroidery.png': '#DC143C'
};

class ImageUploader {
  constructor() {
    this.supabase = null;
    this.bucketName = 'images'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∫–µ—Ç 'images' –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ lib/supabase.ts
    this.imagesPath = path.join(__dirname, 'images'); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–∞–ø–∫–∏ images/ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
   */
  initializeSupabase() {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

    if (!supabaseUrl || !supabaseKey) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: NEXT_PUBLIC_SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY');
    }

    this.supabase = createClient(supabaseUrl, supabaseKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log(`üì¶ –ë–∞–∫–µ—Ç: ${this.bucketName}`);
    console.log(`üìÅ –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${this.imagesPath}`);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –≤ –±–∞–∫–µ—Ç–µ
   */
  async createFolderStructure() {
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫...');

    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫
    const folders = [...new Set(IMAGES_TO_UPLOAD.map(img => img.folder))];

    for (const folderName of folders) {
      try {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —á–µ—Ä–µ–∑ –∑–∞–≥—Ä—É–∑–∫—É –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –ø–∞–ø–∫–∏
        const { error } = await this.supabase.storage
          .from(this.bucketName)
          .upload(`${folderName}/.keep`, new Uint8Array(0), {
            cacheControl: '3600',
            upsert: false
          });

        if (error && error.message !== 'The resource already exists') {
          console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É ${folderName}:`, error.message);
        } else {
          console.log(`‚úÖ –ü–∞–ø–∫–∞ ${folderName}/ —Å–æ–∑–¥–∞–Ω–∞`);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ ${folderName}:`, error.message);
      }
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async uploadLocalImages() {
    console.log('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');

    const uploadedFiles = [];
    const skippedFiles = [];

    for (const imageInfo of IMAGES_TO_UPLOAD) {
      const localPath = path.join(this.imagesPath, imageInfo.name);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
      if (fs.existsSync(localPath)) {
        try {
          const fileBuffer = fs.readFileSync(localPath);
          const fileExt = path.extname(imageInfo.name);
          const contentType = this.getContentType(fileExt);

          // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
          const stats = fs.statSync(localPath);
          const metadata = {
            size: stats.size,
            created: stats.birthtime,
            modified: stats.mtime
          };

          const { data, error } = await this.supabase.storage
            .from(this.bucketName)
            .upload(`${imageInfo.folder}/${imageInfo.name}`, fileBuffer, {
              cacheControl: '3600',
              upsert: true,
              contentType: contentType,
              metadata: metadata
            });

          if (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${imageInfo.name}:`, error.message);
          } else {
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${imageInfo.folder}/${imageInfo.name}`);
            uploadedFiles.push({
              folder: imageInfo.folder,
              file: imageInfo.name,
              path: data.path,
              size: metadata.size,
              contentType: contentType
            });
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${imageInfo.name}:`, error.message);
        }
      } else {
        console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: ${imageInfo.name}`);
        skippedFiles.push(imageInfo.name);
      }
    }

    return { uploadedFiles, skippedFiles };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async createPlaceholders(skippedFiles) {
    console.log('üé® –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');

    const placeholders = [];

    for (const fileName of skippedFiles) {
      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const imageInfo = IMAGES_TO_UPLOAD.find(img => img.name === fileName);

      if (imageInfo) {
        try {
          const placeholderBuffer = await this.createPlaceholderImage(fileName, 800, 600);
          const contentType = this.getContentType(path.extname(fileName));

          const { data, error } = await this.supabase.storage
            .from(this.bucketName)
            .upload(`${imageInfo.folder}/${fileName}`, placeholderBuffer, {
              cacheControl: '3600',
              upsert: true,
              contentType: contentType,
              metadata: { isPlaceholder: true }
            });

          if (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ ${fileName}:`, error.message);
          } else {
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä: ${imageInfo.folder}/${fileName}`);
            placeholders.push({
              folder: imageInfo.folder,
              file: fileName,
              path: data.path,
              isPlaceholder: true
            });
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ ${fileName}:`, error.message);
        }
      }
    }

    return placeholders;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é SVG
   */
  async createPlaceholderImage(fileName, width, height) {
    const color = PLACEHOLDER_COLORS[fileName] || '#CCCCCC';
    const text = fileName.replace(/\.[^/.]+$/, '').replace(/-/g, ' ').toUpperCase();

    const svgContent = `
      <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
        <rect width="100%" height="100%" fill="${color}"/>
        <text x="50%" y="50%" font-family="Arial, sans-serif" font-size="24" fill="white"
              text-anchor="middle" dominant-baseline="middle">${text}</text>
      </svg>
    `;

    return Buffer.from(svgContent, 'utf-8');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ Content-Type –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
   */
  getContentType(extension) {
    const types = {
      '.jpg': 'image/jpeg',
      '.jpeg': 'image/jpeg',
      '.png': 'image/png',
      '.gif': 'image/gif',
      '.webp': 'image/webp',
      '.svg': 'image/svg+xml'
    };

    return types[extension.toLowerCase()] || 'application/octet-stream';
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–ª—è TypeScript
   */
  generateConstants(uploadedFiles, placeholders) {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const allFiles = [...uploadedFiles, ...placeholders];

    let constants = `export const IMAGES = {\n`;

    for (const file of allFiles) {
      const constantName = this.getConstantName(file.file);
      const url = `${supabaseUrl}/storage/v1/object/public/${this.bucketName}/${file.path}`;
      const comment = file.isPlaceholder ? ' // –ü–õ–ï–ô–°–•–û–õ–î–ï–† - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : '';

      constants += `  ${constantName}: "${url}",${comment}\n`;
    }

    constants += `} as const;\n`;

    return constants;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
   */
  getConstantName(fileName) {
    const name = fileName.replace(/\.[^/.]+$/, '').toUpperCase();
    return name.replace(/-/g, '_');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ API
   */
  async verifyImages(uploadedFiles, placeholders) {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');

    const allFiles = [...uploadedFiles, ...placeholders];
    const results = [];

    for (const file of allFiles) {
      try {
        const { data } = this.supabase.storage
          .from(this.bucketName)
          .getPublicUrl(file.path);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
        const response = await fetch(data.publicUrl, { method: 'HEAD' });
        const isAccessible = response.ok;

        results.push({
          file: file.file,
          folder: file.folder,
          url: data.publicUrl,
          accessible: isAccessible,
          status: response.status
        });

        if (isAccessible) {
          console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: ${file.folder}/${file.file}`);
        } else {
          console.warn(`‚ö†Ô∏è  –ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ: ${file.folder}/${file.file} (HTTP ${response.status})`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${file.file}:`, error.message);
        results.push({
          file: file.file,
          folder: file.folder,
          error: error.message,
          accessible: false
        });
      }
    }

    return results;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  async run() {
    try {
      console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Supabase Storage...\n');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      this.initializeSupabase();

      // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
      await this.createFolderStructure();
      console.log('');

      // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const { uploadedFiles, skippedFiles } = await this.uploadLocalImages();
      console.log('');

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      let placeholders = [];
      if (skippedFiles.length > 0) {
        placeholders = await this.createPlaceholders(skippedFiles);
        console.log('');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const verificationResults = await this.verifyImages(uploadedFiles, placeholders);
      console.log('');

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç
      if (uploadedFiles.length > 0 || placeholders.length > 0) {
        const constants = this.generateConstants(uploadedFiles, placeholders);

        console.log('üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è lib/constants.ts:');
        console.log('=' .repeat(60));
        console.log(constants);
        console.log('=' .repeat(60));

        // –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        const constantsPath = path.join(__dirname, 'lib', 'constants.ts');
        try {
          fs.writeFileSync(constantsPath, constants);
          console.log(`‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ: ${constantsPath}`);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç:', error.message);
        }
      }

      // –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
      console.log('\nüìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç:');
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${uploadedFiles.length}`);
      console.log(`üé® –°–æ–∑–¥–∞–Ω–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤: ${placeholders.length}`);
      console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${skippedFiles.length}`);

      if (uploadedFiles.length > 0) {
        console.log('\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:');
        const folderStats = {};
        uploadedFiles.forEach(file => {
          folderStats[file.folder] = (folderStats[file.folder] || 0) + 1;
        });

        Object.entries(folderStats).forEach(([folder, count]) => {
          console.log(`   ${folder}/: ${count} —Ñ–∞–π–ª–æ–≤`);
        });
      }

      if (placeholders.length > 0) {
        console.log('\n‚ö†Ô∏è  –°–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –∫–∞–∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –∏ —Ç—Ä–µ–±—É—é—Ç –∑–∞–º–µ–Ω—ã:');
        placeholders.forEach(p => {
          console.log(`   - ${p.folder}/${p.file}`);
        });
      }

      // –û—Ç—á–µ—Ç –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      const accessibleCount = verificationResults.filter(r => r.accessible).length;
      const totalCount = verificationResults.length;

      console.log(`\nüåê –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ API: ${accessibleCount}/${totalCount} —Ñ–∞–π–ª–æ–≤`);

      if (accessibleCount < totalCount) {
        console.log('\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é:');
        verificationResults.filter(r => !r.accessible).forEach(r => {
          console.log(`   - ${r.folder}/${r.file}: ${r.error || `HTTP ${r.status}`}`);
        });
      }

      console.log('\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
const uploader = new ImageUploader();
uploader.run().catch(console.error);