#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ Supabase
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class SingleFileUploader {
  constructor() {
    this.supabase = null;
    this.bucketName = 'images';
  }

  initializeSupabase() {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

    if (!supabaseUrl || !supabaseKey) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: NEXT_PUBLIC_SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY');
    }

    this.supabase = createClient(supabaseUrl, supabaseKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  async createBucket() {
    console.log(`üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞: ${this.bucketName}...`);

    try {
      const { data, error } = await this.supabase.storage.createBucket(this.bucketName, {
        public: true,
        allowedMimeTypes: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],
        fileSizeLimit: 10485760
      });

      if (error) {
        if (error.message.includes('already exists')) {
          console.log(`‚úÖ –ë–∞–∫–µ—Ç '${this.bucketName}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          return true;
        } else {
          throw error;
        }
      }

      console.log(`‚úÖ –ë–∞–∫–µ—Ç '${this.bucketName}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`);
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∫–µ—Ç–∞:`, error.message);
      return false;
    }
  }

  async uploadTestFile() {
    const testFilePath = path.join(__dirname, 'images', 'logo.png');
    const fileName = 'test-logo.png';
    const folderName = 'test';

    console.log(`üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...`);
    console.log(`–§–∞–π–ª: ${testFilePath}`);
    console.log(`–ü—É—Ç—å –≤ –±–∞–∫–µ—Ç–µ: ${folderName}/${fileName}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
    if (!fs.existsSync(testFilePath)) {
      console.error(`‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${testFilePath}`);
      return false;
    }

    try {
      const fileBuffer = fs.readFileSync(testFilePath);

      const { data, error } = await this.supabase.storage
        .from(this.bucketName)
        .upload(`${folderName}/${fileName}`, fileBuffer, {
          cacheControl: '3600',
          upsert: true,
          contentType: 'image/png'
        });

      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:`, error.message);
        return false;
      }

      console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: ${data.path}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
      const { data: publicUrlData } = this.supabase.storage
        .from(this.bucketName)
        .getPublicUrl(data.path);

      console.log(`üåê –ü—É–±–ª–∏—á–Ω—ã–π URL: ${publicUrlData.publicUrl}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
      const response = await fetch(publicUrlData.publicUrl, { method: 'HEAD' });
      console.log(`üì° –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${response.ok ? '‚úÖ' : '‚ùå'} (${response.status})`);

      if (response.ok) {
        console.log(`üìè –†–∞–∑–º–µ—Ä: ${response.headers.get('content-length')} –±–∞–π—Ç`);
        console.log(`üìÑ –¢–∏–ø: ${response.headers.get('content-type')}`);
      }

      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:`, error.message);
      return false;
    }
  }

  async checkBucketContents() {
    console.log(`üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∫–µ—Ç–∞...`);

    try {
      const { data, error } = await this.supabase.storage
        .from(this.bucketName)
        .list('', {
          limit: 1000
        });

      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:`, error.message);
        return;
      }

      console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${data.length}`);

      data.forEach(item => {
        console.log(`  - ${item.name} (${item.metadata?.size || 0} –±–∞–π—Ç)`);
      });
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∫–µ—Ç–∞:`, error.message);
    }
  }

  async run() {
    try {
      console.log('üöÄ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...\n');

      this.initializeSupabase();

      // –°–æ–∑–¥–∞–µ–º –±–∞–∫–µ—Ç
      const bucketCreated = await this.createBucket();
      if (!bucketCreated) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∫–µ—Ç');
      }
      console.log('');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
      const uploadSuccess = await this.uploadTestFile();
      console.log('');

      if (uploadSuccess) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∫–µ—Ç–∞
        await this.checkBucketContents();
      }

      console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
const tester = new SingleFileUploader();
tester.run().catch(console.error);