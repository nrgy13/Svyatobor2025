const { createClient } = require('@supabase/supabase-js');

// Supabase configuration
const supabaseUrl = 'https://bvuagbjdedtfmvitrfpa.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ2dWFnYmpkZWR0Zm12aXRyZnBhIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MDQ0ODI4MSwiZXhwIjoyMDc2MDI0MjgxfQ.RYhDzxaQf76g-ndAi7sv_ideQADFTZP_Nm24nsqQ3kk';

// Create admin client
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function createContactRequestsTable() {
  console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã contact_requests...');

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É contact_requests —Å –ø–æ–ª–µ–º status
    const { data, error } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS contact_requests (
          id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
          name text NOT NULL,
          phone text NOT NULL,
          preferred_time text,
          created_at timestamptz DEFAULT now(),
          status text DEFAULT 'new'
        );

        -- –í–∫–ª—é—á–∞–µ–º RLS
        ALTER TABLE contact_requests ENABLE ROW LEVEL SECURITY;

        -- –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        DROP POLICY IF EXISTS "Anyone can insert contact requests" ON contact_requests;
        CREATE POLICY "Anyone can insert contact requests"
          ON contact_requests
          FOR INSERT
          TO anon
          WITH CHECK (true);

        DROP POLICY IF EXISTS "Authenticated users can read all contact requests" ON contact_requests;
        CREATE POLICY "Authenticated users can read all contact requests"
          ON contact_requests
          FOR SELECT
          TO authenticated
          USING (true);
      `
    });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
      return false;
    }

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ contact_requests —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    return true;

  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –ø–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ status –æ—Ç–¥–µ–ª—å–Ω–æ
    if (error.message && error.message.includes('exec_sql')) {
      console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞...');

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        const { data: tableExists } = await supabaseAdmin
          .from('contact_requests')
          .select('id')
          .limit(1);

        if (tableExists !== null) {
          console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ contact_requests —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ status
          const { data: columns } = await supabaseAdmin.rpc('get_table_columns', {
            table_name: 'contact_requests'
          });

          const hasStatusColumn = columns?.some(col => col.column_name === 'status');

          if (!hasStatusColumn) {
            console.log('üîÑ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ status...');
            const { error: addColumnError } = await supabaseAdmin.rpc('exec_sql', {
              sql: 'ALTER TABLE contact_requests ADD COLUMN IF NOT EXISTS status text DEFAULT \'new\';'
            });

            if (addColumnError) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è status:', addColumnError);
              return false;
            }

            console.log('‚úÖ –ü–æ–ª–µ status —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
          } else {
            console.log('‚úÖ –ü–æ–ª–µ status —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
          }

          return true;
        }
      } catch (checkError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã:', checkError);
      }
    }

    return false;
  }
}

async function testConnection() {
  console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');

  try {
    const { data, error } = await supabaseAdmin
      .from('contact_requests')
      .select('*')
      .limit(1);

    if (error && !error.message.includes('relation "contact_requests" does not exist')) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      return false;
    }

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');
    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    return false;
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase...\n');

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const connectionOk = await testConnection();
  if (!connectionOk) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase');
    process.exit(1);
  }

  // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
  const tableCreated = await createContactRequestsTable();
  if (!tableCreated) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É contact_requests');
    process.exit(1);
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
  console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã...');
  try {
    const testData = {
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      phone: '+79991234567',
      preferred_time: '—É—Ç—Ä–æ',
      status: 'new'
    };

    const { data, error } = await supabaseAdmin
      .from('contact_requests')
      .insert([testData])
      .select();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
      process.exit(1);
    }

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', data);

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    await supabaseAdmin
      .from('contact_requests')
      .delete()
      .eq('id', data[0].id);

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
  }

  console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  console.log('üìã –¢–∞–±–ª–∏—Ü–∞ contact_requests –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
}

main().catch(console.error);