#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Supabase Storage
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node upload-images-fixed.js
 *
 * –¢—Ä–µ–±—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
 * - NEXT_PUBLIC_SUPABASE_URL
 * - NEXT_PUBLIC_SUPABASE_ANON_KEY
 * - SUPABASE_SERVICE_ROLE_KEY (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤)
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
const FOLDER_STRUCTURE = {
  'logos': [
    { name: 'logo.png', required: true },
    { name: 'logo-circle.png', required: true }
  ],
  'backgrounds': [
    { name: 'hero-bg.jpg', required: true },
    { name: 'result-bg.jpg', required: true }
  ],
  'sections': [
    { name: 'advantages-image.jpg', required: true },
    { name: 'problem-image.jpg', required: true }
  ],
  'services': [
    { name: 'service-trees.jpg', required: true },
    { name: 'service-grass.jpg', required: true },
    { name: 'service-spraying.jpg', required: true },
    { name: 'service-removal.jpg', required: true },
    { name: 'service-construction.jpg', required: true }
  ],
  'clients': [
    { name: 'client-1.jpg', required: false },
    { name: 'client-2.jpg', required: false },
    { name: 'client-3.jpg', required: false }
  ]
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
const PLACEHOLDER_COLORS = {
  'logo-circle.png': '#4A90E2',
  'service-trees.jpg': '#228B22',
  'service-grass.jpg': '#32CD32',
  'service-spraying.jpg': '#4169E1',
  'service-removal.jpg': '#8B4513',
  'service-construction.jpg': '#FFD700',
  'client-1.jpg': '#FF69B4',
  'client-2.jpg': '#00CED1',
  'client-3.jpg': '#FF6347'
};

class ImageUploader {
  constructor() {
    this.supabase = null;
    this.bucketName = 'Svyatobor2025';
    this.imagesPath = path.join(__dirname, 'public', 'images');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
   */
  initializeSupabase() {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

    if (!supabaseUrl || !supabaseKey) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: NEXT_PUBLIC_SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY');
    }

    this.supabase = createClient(supabaseUrl, supabaseKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –≤ –±–∞–∫–µ—Ç–µ
   */
  async createFolderStructure() {
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫...');

    for (const [folderName] of Object.entries(FOLDER_STRUCTURE)) {
      try {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —á–µ—Ä–µ–∑ –∑–∞–≥—Ä—É–∑–∫—É –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –ø–∞–ø–∫–∏
        const { error } = await this.supabase.storage
          .from(this.bucketName)
          .upload(`${folderName}/.keep`, new Uint8Array(0), {
            cacheControl: '3600',
            upsert: false
          });

        if (error && error.message !== 'The resource already exists') {
          console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É ${folderName}:`, error.message);
        } else {
          console.log(`‚úÖ –ü–∞–ø–∫–∞ ${folderName}/ —Å–æ–∑–¥–∞–Ω–∞`);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ ${folderName}:`, error.message);
      }
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async uploadLocalImages() {
    console.log('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');

    const uploadedFiles = [];

    for (const [folderName, files] of Object.entries(FOLDER_STRUCTURE)) {
      for (const file of files) {
        const localPath = path.join(this.imagesPath, file.name);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
        if (fs.existsSync(localPath)) {
          try {
            const fileBuffer = fs.readFileSync(localPath);
            const fileExt = path.extname(file.name);
            const contentType = this.getContentType(fileExt);

            const { data, error } = await this.supabase.storage
              .from(this.bucketName)
              .upload(`${folderName}/${file.name}`, fileBuffer, {
                cacheControl: '3600',
                upsert: true,
                contentType: contentType
              });

            if (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${file.name}:`, error.message);
            } else {
              console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${folderName}/${file.name}`);
              uploadedFiles.push({
                folder: folderName,
                file: file.name,
                path: data.path
              });
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file.name}:`, error.message);
          }
        } else {
          console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: ${file.name}`);
        }
      }
    }

    return uploadedFiles;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async createPlaceholders() {
    console.log('üé® –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤...');

    const placeholders = [];

    for (const [folderName, files] of Object.entries(FOLDER_STRUCTURE)) {
      for (const file of files) {
        const localPath = path.join(this.imagesPath, file.name);

        // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ, —Å–æ–∑–¥–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        if (!fs.existsSync(localPath)) {
          try {
            const placeholderBuffer = await this.createPlaceholderImage(file.name, 800, 600);
            const contentType = this.getContentType(path.extname(file.name));

            const { data, error } = await this.supabase.storage
              .from(this.bucketName)
              .upload(`${folderName}/${file.name}`, placeholderBuffer, {
                cacheControl: '3600',
                upsert: true,
                contentType: contentType
              });

            if (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ ${file.name}:`, error.message);
            } else {
              console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä: ${folderName}/${file.name}`);
              placeholders.push({
                folder: folderName,
                file: file.name,
                path: data.path,
                isPlaceholder: true
              });
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ ${file.name}:`, error.message);
          }
        }
      }
    }

    return placeholders;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é Canvas API (–≤ Node.js)
   */
  async createPlaceholderImage(fileName, width, height) {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ - —Å–æ–∑–¥–∞–µ–º SVG
    const color = PLACEHOLDER_COLORS[fileName] || '#CCCCCC';
    const text = fileName.replace(/\.[^/.]+$/, '').replace(/-/g, ' ').toUpperCase();

    const svgContent = `
      <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
        <rect width="100%" height="100%" fill="${color}"/>
        <text x="50%" y="50%" font-family="Arial, sans-serif" font-size="24" fill="white"
              text-anchor="middle" dominant-baseline="middle">${text}</text>
      </svg>
    `;

    return Buffer.from(svgContent, 'utf-8');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ Content-Type –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
   */
  getContentType(extension) {
    const types = {
      '.jpg': 'image/jpeg',
      '.jpeg': 'image/jpeg',
      '.png': 'image/png',
      '.gif': 'image/gif',
      '.webp': 'image/webp',
      '.svg': 'image/svg+xml'
    };

    return types[extension.toLowerCase()] || 'application/octet-stream';
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–ª—è TypeScript
   */
  generateConstants(uploadedFiles, placeholders) {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const allFiles = [...uploadedFiles, ...placeholders];

    let constants = `export const IMAGES = {\n`;

    for (const file of allFiles) {
      const constantName = this.getConstantName(file.file);
      const url = `${supabaseUrl}/storage/v1/object/public/${this.bucketName}/${file.path}`;
      const comment = file.isPlaceholder ? ' // –ü–õ–ï–ô–°–•–û–õ–î–ï–† - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : '';

      constants += `  ${constantName}: "${url}",${comment}\n`;
    }

    constants += `} as const;\n`;

    return constants;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
   */
  getConstantName(fileName) {
    const name = fileName.replace(/\.[^/.]+$/, '').toUpperCase();
    return name.replace(/-/g, '_');
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  async run() {
    try {
      console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Supabase Storage...\n');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      this.initializeSupabase();

      // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
      await this.createFolderStructure();
      console.log('');

      // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const uploadedFiles = await this.uploadLocalImages();
      console.log('');

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
      const placeholders = await this.createPlaceholders();
      console.log('');

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç
      if (uploadedFiles.length > 0 || placeholders.length > 0) {
        const constants = this.generateConstants(uploadedFiles, placeholders);

        console.log('üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è lib/constants.ts:');
        console.log('=' .repeat(50));
        console.log(constants);
        console.log('=' .repeat(50));

        // –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        const constantsPath = path.join(__dirname, 'lib', 'constants.ts');
        try {
          fs.writeFileSync(constantsPath, constants);
          console.log(`‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ: ${constantsPath}`);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç:', error.message);
        }
      }

      // –û—Ç—á–µ—Ç
      console.log('\nüìä –û—Ç—á–µ—Ç:');
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${uploadedFiles.length}`);
      console.log(`üé® –°–æ–∑–¥–∞–Ω–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤: ${placeholders.length}`);

      if (placeholders.length > 0) {
        console.log('\n‚ö†Ô∏è  –°–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –∫–∞–∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –∏ —Ç—Ä–µ–±—É—é—Ç –∑–∞–º–µ–Ω—ã:');
        placeholders.forEach(p => {
          console.log(`   - ${p.folder}/${p.file}`);
        });
      }

      console.log('\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
const uploader = new ImageUploader();
uploader.run().catch(console.error);