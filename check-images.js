#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Supabase
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class ImageDiagnostics {
  constructor() {
    this.supabase = null;
    this.bucketName = 'images'; // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞
  }

  initializeSupabase() {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

    if (!supabaseUrl || !supabaseKey) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: NEXT_PUBLIC_SUPABASE_URL –∏ NEXT_PUBLIC_SUPABASE_ANON_KEY');
    }

    this.supabase = createClient(supabaseUrl, supabaseKey);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  async checkBucketExists() {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∫–µ—Ç–æ–≤ –≤ Supabase Storage`);

    try {
      const { data, error } = await this.supabase.storage.listBuckets();

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∞–∫–µ—Ç–æ–≤:', error.message);
        return { exists: false, buckets: [] };
      }

      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –±–∞–∫–µ—Ç–æ–≤: ${data.length}`);
      data.forEach(bucket => {
        console.log(`   - ${bucket.name} (${bucket.public ? '–ø—É–±–ª–∏—á–Ω—ã–π' : '–ø—Ä–∏–≤–∞—Ç–Ω—ã–π'})`);
      });

      const bucketExists = data.some(bucket => bucket.name === this.bucketName);

      if (bucketExists) {
        console.log(`‚úÖ –ë–∞–∫–µ—Ç '${this.bucketName}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        return { exists: true, buckets: data };
      } else {
        console.log(`‚ö†Ô∏è  –ë–∞–∫–µ—Ç '${this.bucketName}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);

        // –ò—â–µ–º –±–∞–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const imageBuckets = data.filter(bucket =>
          bucket.name.includes('image') ||
          bucket.name.includes('img') ||
          bucket.name.includes('media') ||
          bucket.name.includes('files')
        );

        if (imageBuckets.length > 0) {
          console.log(`üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –±–∞–∫–µ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:`);
          imageBuckets.forEach(bucket => {
            console.log(`   - ${bucket.name}`);
          });
        }

        return { exists: false, buckets: data };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∫–µ—Ç–∞:', error.message);
      return { exists: false, buckets: [] };
    }
  }

  async checkImageFiles() {
    console.log(`üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ '${this.bucketName}'`);

    try {
      const { data, error } = await this.supabase.storage
        .from(this.bucketName)
        .list('', {
          limit: 100,
          sortBy: { column: 'name', order: 'asc' }
        });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', error.message);
        return [];
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${data.length}`);

      if (data.length > 0) {
        console.log('üìã –§–∞–π–ª—ã –≤ –±–∞–∫–µ—Ç–µ:');
        data.forEach(file => {
          console.log(`   - ${file.name}`);
        });
      }

      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–æ–≤:', error.message);
      return [];
    }
  }

  async testImageUrls() {
    console.log('üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');

    const testImages = [
      'logos/logo.png',
      'backgrounds/hero-bg.jpg',
      'sections/problem-image.jpg',
      'logos/logo-circle.png'
    ];

    const results = [];

    for (const imagePath of testImages) {
      try {
        const { data } = this.supabase.storage
          .from(this.bucketName)
          .getPublicUrl(imagePath);

        console.log(`\nüñºÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${imagePath}`);
        console.log(`   URL: ${data.publicUrl}`);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        const response = await fetch(data.publicUrl, {
          method: 'HEAD',
          signal: AbortSignal.timeout(10000) // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        });

        const isAccessible = response.ok;
        console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${isAccessible ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω'}`);
        console.log(`   HTTP —Å—Ç–∞—Ç—É—Å: ${response.status}`);

        if (!isAccessible) {
          console.log(`   –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:`, Object.fromEntries(response.headers.entries()));
        }

        results.push({
          path: imagePath,
          url: data.publicUrl,
          accessible: isAccessible,
          status: response.status
        });

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${imagePath}:`, error.message);
        results.push({
          path: imagePath,
          error: error.message,
          accessible: false
        });
      }
    }

    return results;
  }

  async runDiagnostics() {
    console.log('üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ Supabase Storage\n');

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      this.initializeSupabase();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∫–µ—Ç–æ–≤
      const bucketCheck = await this.checkBucketExists();

      if (!bucketCheck.exists && bucketCheck.buckets.length === 0) {
        console.log('\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∫–µ—Ç–æ–≤');
        return;
      }

      console.log('');

      // –ï—Å–ª–∏ –±–∞–∫–µ—Ç 'images' –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –±–∞–∫–µ—Ç—ã
      let targetBucket = this.bucketName;
      if (!bucketCheck.exists) {
        console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–∫–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...`);
        targetBucket = bucketCheck.buckets[0].name;
        console.log(`üì¶ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –±–∞–∫–µ—Ç: ${targetBucket}`);
      }

      // –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const originalBucket = this.bucketName;
      this.bucketName = targetBucket;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
      const files = await this.checkImageFiles();
      console.log('');

      // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL
      const urlTests = await this.testImageUrls();
      console.log('');

      // –û—Ç—á–µ—Ç
      console.log('\nüìä –û—Ç—á–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
      console.log(`–ë–∞–∫–µ—Ç '${targetBucket}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ‚úÖ`);
      console.log(`–§–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ: ${files.length}`);

      const accessibleImages = urlTests.filter(test => test.accessible).length;
      const totalImages = urlTests.length;
      console.log(`–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${accessibleImages}/${totalImages}`);

      if (files.length > 0) {
        console.log('\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ:');
        const folderStats = {};
        files.forEach(file => {
          const folder = file.name.includes('/') ? file.name.split('/')[0] : '–∫–æ—Ä–µ–Ω—å';
          folderStats[folder] = (folderStats[folder] || 0) + 1;
        });

        Object.entries(folderStats).forEach(([folder, count]) => {
          console.log(`   ${folder}/: ${count} —Ñ–∞–π–ª–æ–≤`);
        });
      }

      if (accessibleImages < totalImages) {
        console.log('\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
        urlTests.filter(test => !test.accessible).forEach(test => {
          console.log(`   - ${test.path}: ${test.error || `HTTP ${test.status}`}`);
        });

        console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
        console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (RLS) –≤ Supabase Dashboard');
        console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∫–µ—Ç');
        console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –≤ –±–∞–∫–µ—Ç–µ Supabase');
        console.log('   4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω—ã');
      } else {
        console.log('\n‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã!');

        if (targetBucket !== originalBucket) {
          console.log(`\nüîÑ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –æ–±–Ω–æ–≤–∏—Ç–µ bucketName –≤ –∫–æ–¥–µ`);
          console.log(`   –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '${originalBucket}'`);
          console.log(`   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '${targetBucket}'`);
        }
      }

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
const diagnostics = new ImageDiagnostics();
diagnostics.runDiagnostics().catch(console.error);