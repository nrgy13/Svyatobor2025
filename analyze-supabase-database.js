#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const envPath = path.join(__dirname, '.env');
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  envContent.split('\n').forEach(line => {
    const [key, ...valueParts] = line.split('=');
    if (key && valueParts.length > 0) {
      const value = valueParts.join('=').replace(/"/g, '');
      process.env[key] = value;
    }
  });
}

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å —Å–µ—Ä–≤–∏—Å–Ω—ã–º –∫–ª—é—á–æ–º –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function analyzeDatabase() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase...');
  console.log(`üì° URL: ${SUPABASE_URL}`);
  console.log('');

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü...');
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name, table_schema')
      .eq('table_schema', 'public')
      .eq('table_type', 'BASE TABLE');

    if (tablesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü:', tablesError);
      return;
    }

    if (!tables || tables.length === 0) {
      console.log('‚ö†Ô∏è  –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ public');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tables.length} —Ç–∞–±–ª–∏—Ü:`);
    console.log('');

    const analysis = {
      timestamp: new Date().toISOString(),
      totalTables: tables.length,
      tables: []
    };

    for (const table of tables) {
      const tableName = table.table_name;
      console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É: ${tableName}`);

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
      const { data: columns, error: columnsError } = await supabase
        .from('information_schema.columns')
        .select('column_name, data_type, is_nullable, column_default')
        .eq('table_name', tableName)
        .eq('table_schema', 'public')
        .order('ordinal_position');

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
      const { count, error: countError } = await supabase
        .from(tableName)
        .select('*', { count: 'exact', head: true });

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RLS
      const { data: rlsPolicies, error: rlsError } = await supabase
        .from('pg_policies')
        .select('policyname, permissive, roles, cmd, qual, with_check')
        .eq('tablename', tableName);

      const tableInfo = {
        name: tableName,
        columns: columns || [],
        recordCount: count || 0,
        rlsPolicies: rlsPolicies || [],
        errors: {
          columns: columnsError?.message,
          count: countError?.message,
          rls: rlsError?.message
        }
      };

      analysis.tables.push(tableInfo);

      // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
      console.log(`  üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${count || 0}`);

      if (columns && columns.length > 0) {
        console.log(`  üèóÔ∏è  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–µ–π:`);
        columns.forEach(col => {
          const nullable = col.is_nullable === 'YES' ? 'NULL' : 'NOT NULL';
          const defaultVal = col.column_default ? ` DEFAULT ${col.column_default}` : '';
          console.log(`    - ${col.column_name} (${col.data_type}) ${nullable}${defaultVal}`);
        });
      } else {
        console.log(`  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–µ–π`);
      }

      if (rlsPolicies && rlsPolicies.length > 0) {
        console.log(`  üîí –ü–æ–ª–∏—Ç–∏–∫–∏ RLS: ${rlsPolicies.length} –ø–æ–ª–∏—Ç–∏–∫`);
        rlsPolicies.forEach(policy => {
          console.log(`    - ${policy.policyname} (${policy.cmd})`);
        });
      } else {
        console.log(`  üîì RLS: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø–æ–ª–∏—Ç–∏–∫`);
      }

      console.log('');
    }

    // –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü–∞–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    const contactTables = analysis.tables.filter(table =>
      table.name.includes('contact') ||
      table.name.includes('request') ||
      table.name.includes('submission')
    );

    if (contactTables.length > 0) {
      console.log('üìû –¢–ê–ë–õ–ò–¶–´ –ö–û–ù–¢–ê–ö–¢–û–í:');
      contactTables.forEach(table => {
        console.log(`  üìã ${table.name}:`);
        console.log(`    - –ó–∞–ø–∏—Å–µ–π: ${table.recordCount}`);
        console.log(`    - –ü–æ–ª–µ–π: ${table.columns.length}`);
        if (table.columns.length > 0) {
          console.log(`    - –°—Ç—Ä—É–∫—Ç—É—Ä–∞: ${table.columns.map(col => `${col.column_name}(${col.data_type})`).join(', ')}`);
        }
      });
      console.log('');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    const reportPath = path.join(__dirname, 'supabase-analysis-report.json');
    fs.writeFileSync(reportPath, JSON.stringify(analysis, null, 2));
    console.log(`üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`);

    return analysis;

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeDatabase()
  .then(result => {
    if (result) {
      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log('‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏');
    }
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });