#!/usr/bin/env pwsh
<#
.SYNOPSIS
    –°–∫—Ä–∏–ø—Ç –æ—Ç–∫–∞—Ç–∞ –¥–ª—è Svyatobor Web

.DESCRIPTION
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å –¥–µ–ø–ª–æ–µ–º.
    –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ –∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏ –±—ç–∫–∞–ø–∞–º–∏.

.PARAMETER Environment
    –°—Ä–µ–¥–∞ –¥–ª—è –æ—Ç–∫–∞—Ç–∞: staging –∏–ª–∏ production (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: production)

.PARAMETER BackupName
    –ò–º—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è –æ—Ç–∫–∞—Ç–∞

.PARAMETER ListBackups
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π

.PARAMETER Force
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∫–∞—Ç –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

.PARAMETER Help
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

.EXAMPLE
    .\rollback.ps1 -Environment production

.EXAMPLE
    .\rollback.ps1 -BackupName "production_20231017_143000"

.EXAMPLE
    .\rollback.ps1 -ListBackups

.EXAMPLE
    .\rollback.ps1 -Environment production -Force
#>

[CmdletBinding()]
param(
    [Parameter(Mandatory = $false)]
    [ValidateSet("staging", "production")]
    [string]$Environment = "production",

    [Parameter(Mandatory = $false)]
    [string]$BackupName,

    [switch]$ListBackups,
    [switch]$Force,
    [switch]$Help
)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$ColorScheme = @{
    Primary = "Cyan"
    Success = "Green"
    Warning = "Yellow"
    Error = "Red"
    Info = "White"
    Highlight = "Magenta"
}

function Show-Header {
    Clear-Host
    Write-Host "==================================================" -ForegroundColor $ColorScheme.Primary
    Write-Host "üîÑ Rollback Script v1.0.0" -ForegroundColor $ColorScheme.Highlight
    Write-Host "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –æ—Ç–∫–∞—Ç Svyatobor Web" -ForegroundColor $ColorScheme.Primary
    Write-Host "==================================================" -ForegroundColor $ColorScheme.Primary
    Write-Host "–°—Ä–µ–¥–∞: $(Get-Culture).Name" -ForegroundColor $ColorScheme.Info
    Write-Host "–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: $(Get-Date)" -ForegroundColor $ColorScheme.Info
    Write-Host "==================================================" -ForegroundColor $ColorScheme.Primary
    Write-Host ""
}

function Show-Help {
    Write-Host "–ü–û–ú–û–©–¨: Rollback Script v1.0.0" -ForegroundColor $ColorScheme.Highlight
    Write-Host "==================================================" -ForegroundColor $ColorScheme.Primary
    Write-Host ""
    Write-Host "–û–ü–ò–°–ê–ù–ò–ï:" -ForegroundColor $ColorScheme.Success
    Write-Host "    –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –æ—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    Write-Host ""
    Write-Host "–ü–ê–†–ê–ú–ï–¢–†–´:" -ForegroundColor $ColorScheme.Success
    Write-Host "    -Environment <string>" -ForegroundColor $ColorScheme.Warning
    Write-Host "        –°—Ä–µ–¥–∞ –¥–ª—è –æ—Ç–∫–∞—Ç–∞: staging –∏–ª–∏ production (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: production)"
    Write-Host ""
    Write-Host "    -BackupName <string>" -ForegroundColor $ColorScheme.Warning
    Write-Host "        –ò–º—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è –æ—Ç–∫–∞—Ç–∞"
    Write-Host ""
    Write-Host "    -ListBackups" -ForegroundColor $ColorScheme.Warning
    Write-Host "        –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"
    Write-Host ""
    Write-Host "    -Force" -ForegroundColor $ColorScheme.Warning
    Write-Host "        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∫–∞—Ç –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    Write-Host ""
    Write-Host "    -Help" -ForegroundColor $ColorScheme.Warning
    Write-Host "        –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    Write-Host ""
    Write-Host "–ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:" -ForegroundColor $ColorScheme.Success
    Write-Host "    .\rollback.ps1 -Environment production"
    Write-Host "    .\rollback.ps1 -BackupName 'production_20231017_143000'"
    Write-Host "    .\rollback.ps1 -ListBackups"
    Write-Host "    .\rollback.ps1 -Environment production -Force"
    Write-Host ""
}

function Get-AvailableBackups {
    param([string]$Environment)

    Write-Host "üìã –ü–æ–∏—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–ª—è —Å—Ä–µ–¥—ã: $Environment" -ForegroundColor $ColorScheme.Info

    $backups = @()

    # –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    $localBackupDir = "backup"
    if (Test-Path $localBackupDir) {
        $localBackups = Get-ChildItem $localBackupDir -Directory | Where-Object {
            $_.Name -like "$Environment*"
        } | Sort-Object CreationTime -Descending

        foreach ($backup in $localBackups) {
            $backups += @{
                Name = $backup.Name
                Path = $backup.FullName
                Type = "–õ–æ–∫–∞–ª—å–Ω–∞—è"
                Size = Get-DirectorySize -Path $backup.FullName
                Date = $backup.CreationTime
            }
        }
    }

    return $backups
}

function Show-BackupList {
    param([array]$Backups)

    if ($Backups.Count -eq 0) {
        Write-Host "‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" -ForegroundColor $ColorScheme.Error
        return $false
    }

    Write-Host "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:" -ForegroundColor $ColorScheme.Success
    Write-Host "==================================================" -ForegroundColor $ColorScheme.Primary

    for ($i = 0; $i -lt $Backups.Count; $i++) {
        $backup = $Backups[$i]
        $sizeFormatted = FormatBytes -Bytes $backup.Size
        $dateFormatted = $backup.Date.ToString("yyyy-MM-dd HH:mm:ss")

        Write-Host "$($i + 1). $($backup.Name)" -ForegroundColor $ColorScheme.Warning
        Write-Host "   –¢–∏–ø: $($backup.Type)" -ForegroundColor $ColorScheme.Info
        Write-Host "   –†–∞–∑–º–µ—Ä: $sizeFormatted" -ForegroundColor $ColorScheme.Info
        Write-Host "   –î–∞—Ç–∞: $dateFormatted" -ForegroundColor $ColorScheme.Info
        Write-Host "   –ü—É—Ç—å: $($backup.Path)" -ForegroundColor $ColorScheme.Info
        Write-Host ""
    }

    return $true
}

function Get-DirectorySize {
    param([string]$Path)

    if (!(Test-Path $Path)) {
        return 0
    }

    $items = Get-ChildItem $Path -Recurse -ErrorAction SilentlyContinue
    $totalSize = 0

    foreach ($item in $items) {
        if (!$item.PSIsContainer) {
            $totalSize += $item.Length
        }
    }

    return $totalSize
}

function FormatBytes {
    param([long]$Bytes)

    $units = "–ë", "–ö–ë", "–ú–ë", "–ì–ë", "–¢–ë"
    $i = 0

    while ($Bytes -ge 1KB -and $i -lt 4) {
        $Bytes = $Bytes / 1KB
        $i++
    }

    return "{0:N1} {1}" -f $Bytes, $units[$i]
}

function Confirm-Rollback {
    param([string]$BackupName, [string]$Environment)

    if ($Force) {
        return $true
    }

    Write-Host "‚ö†Ô∏è –í–´–ü–û–õ–ù–ï–ù–ò–ï –û–¢–ö–ê–¢–ê" -ForegroundColor $ColorScheme.Warning
    Write-Host "==================================================" -ForegroundColor $ColorScheme.Primary
    Write-Host "–°—Ä–µ–¥–∞: $Environment" -ForegroundColor $ColorScheme.Warning
    Write-Host "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $BackupName" -ForegroundColor $ColorScheme.Warning
    Write-Host ""
    Write-Host "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:" -ForegroundColor $ColorScheme.Error
    Write-Host "  ‚ùå –ó–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" -ForegroundColor $ColorScheme.Error
    Write-Host "  ‚ùå –ú–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö" -ForegroundColor $ColorScheme.Error
    Write-Host "  ‚ùå –¢—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞" -ForegroundColor $ColorScheme.Error
    Write-Host ""

    $confirmation = Read-Host "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∫–∞—Ç? (yes/no)"

    return $confirmation -eq "yes" -or $confirmation -eq "y"
}

function Test-ServerConnection {
    Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É..." -ForegroundColor $ColorScheme.Info

    # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
    Import-Module ".\deploy-modules\config.psm1" -Force
    Import-Module ".\deploy-modules\logger.psm1" -Force

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    Load-DeployConfig -Environment $Environment

    $config = Get-DeployConfig

    if ([string]::IsNullOrEmpty($config.SSHHost) -or [string]::IsNullOrEmpty($config.SSHUser)) {
        Write-Host "‚ùå SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ –≤ .env.deploy" -ForegroundColor $ColorScheme.Error
        return $false
    }

    try {
        $sshOptions = $config.GetSSHOptions()
        $testCommand = "ssh $($sshOptions) $($config.SSHUser)@$($config.SSHHost) 'echo '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ' && ls -la $($config.RemotePath)'"

        $testProcess = Start-Process "bash" -ArgumentList "-c", $testCommand -NoNewWindow -Wait -PassThru

        if ($testProcess.ExitCode -eq 0) {
            Write-Host "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor $ColorScheme.Success
            return $true
        } else {
            Write-Host "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É" -ForegroundColor $ColorScheme.Error
            return $false
        }
    }
    catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $($_.Exception.Message)" -ForegroundColor $ColorScheme.Error
        return $false
    }
}

function Start-RollbackProcess {
    param([string]$BackupName, [string]$Environment)

    Write-Host "üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–∞—Ç–∞..." -ForegroundColor $ColorScheme.Warning

    try {
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        if (!(Test-ServerConnection)) {
            Write-Host "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∫–∞—Ç –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É" -ForegroundColor $ColorScheme.Error
            return $false
        }

        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        Write-Host "üíæ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è..." -ForegroundColor $ColorScheme.Info
        $currentBackupName = "$Environment`_current_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
        $currentBackupPath = "backup\$currentBackupName"

        if (Test-Path "out") {
            New-Item -ItemType Directory -Path $currentBackupPath -Force | Out-Null
            Copy-Item "out\*" $currentBackupPath -Recurse -Force
            Write-Host "‚úÖ –¢–µ–∫—É—â–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $currentBackupName" -ForegroundColor $ColorScheme.Success
        }

        # –®–∞–≥ 3: –ü–æ–∏—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        Write-Host "üîç –ü–æ–∏—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: $BackupName" -ForegroundColor $ColorScheme.Info

        $backupPath = "backup\$BackupName"
        if (!(Test-Path $backupPath)) {
            Write-Host "‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $backupPath" -ForegroundColor $ColorScheme.Error
            return $false
        }

        # –®–∞–≥ 4: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        Write-Host "üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..." -ForegroundColor $ColorScheme.Warning

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–±–æ—Ä–∫—É
        if (Test-Path "out") {
            Remove-Item "out" -Recurse -Force
        }

        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        Copy-Item "$backupPath\*" "out" -Recurse -Force

        Write-Host "‚úÖ –§–∞–π–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏" -ForegroundColor $ColorScheme.Success

        # –®–∞–≥ 5: –î–µ–ø–ª–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        Write-Host "üì§ –ó–∞–≥—Ä—É–∂–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä..." -ForegroundColor $ColorScheme.Info

        # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –¥–µ–ø–ª–æ—è
        Import-Module ".\deploy-modules\deployer.psm1" -Force

        $deployResult = Start-Deploy -Environment $Environment

        if ($deployResult.Success) {
            Write-Host "‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor $ColorScheme.Success
            Write-Host "üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫–∞—Ç–∞: $($deployResult.Duration)" -ForegroundColor $ColorScheme.Info
            return $true
        } else {
            Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤" -ForegroundColor $ColorScheme.Error
            return $false
        }

    }
    catch {
        Write-Host "üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: $($_.Exception.Message)" -ForegroundColor $ColorScheme.Error
        return $false
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
try {
    Show-Header

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞
    if ($Help) {
        Show-Help
        exit 0
    }

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    if ($ListBackups) {
        $backups = Get-AvailableBackups -Environment $Environment
        $hasBackups = Show-BackupList -Backups $backups

        if ($hasBackups) {
            Write-Host "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -BackupName –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏" -ForegroundColor $ColorScheme.Info
        }

        exit 0
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –æ—Ç–∫–∞—Ç–∞
    $targetBackup = $BackupName
    if ([string]::IsNullOrEmpty($targetBackup)) {
        $backups = Get-AvailableBackups -Environment $Environment

        if ($backups.Count -eq 0) {
            Write-Host "‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å—Ä–µ–¥—ã: $Environment" -ForegroundColor $ColorScheme.Error
            exit 1
        }

        $targetBackup = $backups[0].Name
        Write-Host "üìã –ò—Å–ø–æ–ª—å–∑—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: $targetBackup" -ForegroundColor $ColorScheme.Info
    }

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–∞—Ç–∞
    if (!(Confirm-Rollback -BackupName $targetBackup -Environment $Environment)) {
        Write-Host "‚ùå –û—Ç–∫–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º" -ForegroundColor $ColorScheme.Warning
        exit 0
    }

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–∞—Ç–∞
    $success = Start-RollbackProcess -BackupName $targetBackup -Environment $Environment

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    Write-Host ""
    Write-Host "==================================================" -ForegroundColor $ColorScheme.Primary
    Write-Host "üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢ –û–¢–ö–ê–¢–ê" -ForegroundColor $ColorScheme.Highlight
    Write-Host "==================================================" -ForegroundColor $ColorScheme.Primary

    if ($success) {
        Write-Host "‚úÖ –û–¢–ö–ê–¢ –í–´–ü–û–õ–ù–ï–ù –£–°–ü–ï–®–ù–û" -ForegroundColor $ColorScheme.Success
        Write-Host "üéØ –°—Ä–µ–¥–∞: $Environment" -ForegroundColor $ColorScheme.Success
        Write-Host "üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $targetBackup" -ForegroundColor $ColorScheme.Success
        Write-Host "üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $(Get-Date)" -ForegroundColor $ColorScheme.Info

        Write-Host ""
        Write-Host "üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!" -ForegroundColor $ColorScheme.Success
        Write-Host "üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:" -ForegroundColor $ColorScheme.Info
        Write-Host "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∞–π—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ" -ForegroundColor $ColorScheme.Info
        Write-Host "   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" -ForegroundColor $ColorScheme.Info
        Write-Host "   3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞" -ForegroundColor $ColorScheme.Info
    } else {
        Write-Host "‚ùå –û–¢–ö–ê–¢ –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–ê–ú–ò" -ForegroundColor $ColorScheme.Error
        Write-Host "üéØ –°—Ä–µ–¥–∞: $Environment" -ForegroundColor $ColorScheme.Error
        Write-Host "üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $targetBackup" -ForegroundColor $ColorScheme.Error
        Write-Host "üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $(Get-Date)" -ForegroundColor $ColorScheme.Info

        Write-Host ""
        Write-Host "üí• –í–æ –≤—Ä–µ–º—è –æ—Ç–∫–∞—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏!" -ForegroundColor $ColorScheme.Error
        Write-Host "üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:" -ForegroundColor $ColorScheme.Warning
        Write-Host "   1. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É" -ForegroundColor $ColorScheme.Warning
        Write-Host "   2. –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è" -ForegroundColor $ColorScheme.Warning
        Write-Host "   3. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞" -ForegroundColor $ColorScheme.Warning
        Write-Host "   4. –ü—Ä–æ–±–ª–µ–º—ã —Å SSH –∫–ª—é—á–∞–º–∏" -ForegroundColor $ColorScheme.Warning
    }

    Write-Host "==================================================" -ForegroundColor $ColorScheme.Primary

    if ($success) { exit 0 } else { exit 1 }

} catch {
    Write-Host ""
    Write-Host "üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: $($_.Exception.Message)" -ForegroundColor $ColorScheme.Error
    Write-Host "üìç –°—Ç—Ä–æ–∫–∞: $($_.InvocationInfo.ScriptLineNumber)" -ForegroundColor $ColorScheme.Error
    Write-Host "üìÑ –§–∞–π–ª: $($_.InvocationInfo.ScriptName)" -ForegroundColor $ColorScheme.Error

    Write-Host ""
    Write-Host "üîß –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:" -ForegroundColor $ColorScheme.Warning
    Write-Host "   .\rollback.ps1 -Help" -ForegroundColor $ColorScheme.Info

    exit 1
}