# –ú–æ–¥—É–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –¥–µ–ø–ª–æ—è
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é

using module ".\config.psm1"
using module ".\logger.psm1"

class ValidationResult {
    [bool]$IsValid
    [string[]]$Errors
    [string[]]$Warnings
    [string[]]$Info

    ValidationResult() {
        $this.IsValid = $true
        $this.Errors = @()
        $this.Warnings = @()
        $this.Info = @()
    }

    [void] AddError([string]$errorMessage) {
        $this.IsValid = $false
        $this.Errors += $errorMessage
    }

    [void] AddWarning([string]$warning) {
        $this.Warnings += $warning
    }

    [void] AddInfo([string]$info) {
        $this.Info += $info
    }
}

class DeployValidator {
    [DeployConfig]$Config
    [DeployLogger]$Logger

    DeployValidator([DeployConfig]$config, [DeployLogger]$logger) {
        $this.Config = $config
        $this.Logger = $logger
    }

    [ValidationResult] ValidateAll() {
        $this.Logger.LogStep("–í–ê–õ–ò–î–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é")

        $result = [ValidationResult]::new()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        $this.ValidateSystemRequirements($result)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        $this.ValidateConfiguration($result)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç
        $this.ValidateProject($result)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä–∫—É
        $this.ValidateBuild($result)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
        $this.ValidateServer($result)

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        $this.DisplayValidationResults($result)

        return $result
    }

    [void] ValidateSystemRequirements([ValidationResult]$result) {
        $this.Logger.Info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ PowerShell –≤–µ—Ä—Å–∏–∏
        $psVersionInfo = $PSVersionTable.PSVersion
        if ($psVersionInfo.Major -lt 5) {
            $result.AddError("–¢—Ä–µ–±—É–µ—Ç—Å—è PowerShell –≤–µ—Ä—Å–∏–∏ 5.0 –∏–ª–∏ –≤—ã—à–µ. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $($psVersionInfo.Major).$($psVersionInfo.Minor)")
        } else {
            $result.AddInfo("‚úÖ PowerShell –≤–µ—Ä—Å–∏—è: $($psVersionInfo.Major).$($psVersionInfo.Minor)")
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è SSH –∫–ª–∏–µ–Ω—Ç–∞
        try {
            $sshVersion = ssh -V 2>$null
            if ($LASTEXITCODE -eq 0) {
                $result.AddInfo("‚úÖ SSH –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
            } else {
                $result.AddWarning("‚ö†Ô∏è SSH –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            }
        }
        catch {
            $result.AddWarning("‚ö†Ô∏è SSH –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Git
        try {
            $gitVersion = git --version 2>$null
            if ($LASTEXITCODE -eq 0) {
                $result.AddInfo("‚úÖ Git –¥–æ—Å—Ç—É–ø–µ–Ω")
            } else {
                $result.AddWarning("‚ö†Ô∏è Git –Ω–µ –Ω–∞–π–¥–µ–Ω")
            }
        }
        catch {
            $result.AddWarning("‚ö†Ô∏è Git –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }
    }

    [void] ValidateConfiguration([ValidationResult]$result) {
        $this.Logger.Info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env.deploy —Ñ–∞–π–ª–∞
        $envFile = ".env.deploy"
        if (Test-Path $envFile) {
            $result.AddInfo("‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω: $envFile")
        } else {
            $result.AddWarning("‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $envFile")
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if ([string]::IsNullOrEmpty($this.Config.SSHHost)) {
            $result.AddError("SSH_HOST –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        } else {
            $result.AddInfo("‚úÖ SSH_HOST –Ω–∞—Å—Ç—Ä–æ–µ–Ω: $($this.Config.SSHHost)")
        }

        if ([string]::IsNullOrEmpty($this.Config.SSHUser)) {
            $result.AddError("SSH_USER –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        } else {
            $result.AddInfo("‚úÖ SSH_USER –Ω–∞—Å—Ç—Ä–æ–µ–Ω: $($this.Config.SSHUser)")
        }

        if ([string]::IsNullOrEmpty($this.Config.RemotePath)) {
            $result.AddError("REMOTE_PATH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        } else {
            $result.AddInfo("‚úÖ REMOTE_PATH –Ω–∞—Å—Ç—Ä–æ–µ–Ω: $($this.Config.RemotePath)")
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞
        if ([string]::IsNullOrEmpty($this.Config.ProductionDomain)) {
            $result.AddError("PRODUCTION_DOMAIN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        } else {
            $result.AddInfo("‚úÖ PRODUCTION_DOMAIN –Ω–∞—Å—Ç—Ä–æ–µ–Ω: $($this.Config.ProductionDomain)")
        }
    }

    [void] ValidateProject([ValidationResult]$result) {
        $this.Logger.Info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è package.json
        if (Test-Path "package.json") {
            $result.AddInfo("‚úÖ package.json –Ω–∞–π–¥–µ–Ω")
        } else {
            $result.AddError("package.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è node_modules
        if (Test-Path "node_modules") {
            $result.AddInfo("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (node_modules)")
        } else {
            $result.AddWarning("‚ö†Ô∏è –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        if (Test-Path "images") {
            $imageCount = (Get-ChildItem "images" -File | Measure-Object).Count
            $result.AddInfo("‚úÖ –ü–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–∞: $imageCount —Ñ–∞–π–ª–æ–≤")
        } else {
            $result.AddWarning("‚ö†Ô∏è –ü–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞–ø–∫–∏ public/images
        if (Test-Path "public/images") {
            $publicImageCount = (Get-ChildItem "public/images" -File | Measure-Object).Count
            $result.AddInfo("‚úÖ –ü–∞–ø–∫–∞ public/images –Ω–∞–π–¥–µ–Ω–∞: $publicImageCount —Ñ–∞–π–ª–æ–≤")
        } else {
            $result.AddWarning("‚ö†Ô∏è –ü–∞–ø–∫–∞ public/images –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        }
    }

    [void] ValidateBuild([ValidationResult]$result) {
        $this.Logger.Info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞–ø–∫–∏ out
        if (Test-Path "out") {
            $buildItems = Get-ChildItem "out" -Recurse
            $fileCount = ($buildItems | Where-Object { !$_.PSIsContainer }).Count
            $totalSize = ($buildItems | Measure-Object -Property Length -Sum).Sum

            $result.AddInfo("‚úÖ –ü–∞–ø–∫–∞ —Å–±–æ—Ä–∫–∏ –Ω–∞–π–¥–µ–Ω–∞: $fileCount —Ñ–∞–π–ª–æ–≤, $($this.FormatBytes($totalSize))")
        } else {
            $result.AddWarning("‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å–±–æ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (out). –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–±–æ—Ä–∫—É –∫–æ–º–∞–Ω–¥–æ–π: npm run build")
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å–±–æ—Ä–∫–∏
        $criticalFiles = @("out/index.html", "out/404.html", "out/favicon.ico")
        foreach ($file in $criticalFiles) {
            if (Test-Path $file) {
                $fileSize = (Get-Item $file).Length
                $result.AddInfo("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: $(Split-Path $file -Leaf) ($($this.FormatBytes($fileSize)))")
            } else {
                $result.AddWarning("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $(Split-Path $file -Leaf)")
            }
        }
    }

    [void] ValidateServer([ValidationResult]$result) {
        $this.Logger.Info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...")

        if ([string]::IsNullOrEmpty($this.Config.SSHHost) -or [string]::IsNullOrEmpty($this.Config.SSHUser)) {
            $result.AddWarning("‚ö†Ô∏è SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä–≤–µ—Ä–∞")
            return
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try {
            $sshTest = ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "$($this.Config.SSHUser)@$($this.Config.SSHHost)" "echo 'SSH connection successful'" 2>$null
            if ($LASTEXITCODE -eq 0) {
                $result.AddInfo("‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —Ä–∞–±–æ—Ç–∞–µ—Ç")
            } else {
                $result.AddWarning("‚ö†Ô∏è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            }
        }
        catch {
            $result.AddWarning("‚ö†Ô∏è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: $($_.Exception.Message)")
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –¥–æ–º–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        if (![string]::IsNullOrEmpty($this.Config.ProductionDomain)) {
            try {
                $webRequest = Invoke-WebRequest -Uri "https://$($this.Config.ProductionDomain)" -TimeoutSec 10 -ErrorAction SilentlyContinue
                if ($webRequest.StatusCode -eq 200) {
                    $result.AddInfo("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç (HTTP $($webRequest.StatusCode))")
                } else {
                    $result.AddWarning("‚ö†Ô∏è –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º $($webRequest.StatusCode)")
                }
            }
            catch {
                $result.AddWarning("‚ö†Ô∏è –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $($_.Exception.Message)")
            }
        }
    }

    [string] FormatBytes([long]$bytes) {
        $units = "–ë", "–ö–ë", "–ú–ë", "–ì–ë", "–¢–ë"
        $i = 0

        while ($bytes -ge 1KB -and $i -lt 4) {
            $bytes = $bytes / 1KB
            $i++
        }

        return "{0:N1} {1}" -f $bytes, $units[$i]
    }

    [void] DisplayValidationResults([ValidationResult]$result) {
        $this.Logger.Info("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò")
        $this.Logger.Info("===============================================")

        if ($result.Info.Count -gt 0) {
            $this.Logger.Info("‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
            foreach ($info in $result.Info) {
                $this.Logger.Info("  $info")
            }
        }

        if ($result.Warnings.Count -gt 0) {
            $this.Logger.Warn("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            foreach ($warning in $result.Warnings) {
                $this.Logger.Warn("  $warning")
            }
        }

        if ($result.Errors.Count -gt 0) {
            $this.Logger.Error("‚ùå –û–®–ò–ë–ö–ò:")
            foreach ($errorMessage in $result.Errors) {
                $this.Logger.Error("  $errorMessage")
            }
        }

        $this.Logger.Info("===============================================")

        if ($result.IsValid) {
            $this.Logger.LogSuccess("–í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–ô–î–ï–ù–ê", "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–ø–ª–æ—é")
        } else {
            $this.Logger.LogError("–í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï –ü–†–û–ô–î–ï–ù–ê", "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
        }
    }
}

# –§—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è
function Test-DeployReadiness {
    $config = Get-DeployConfig
    $logger = Get-DeployLogger
    $validator = [DeployValidator]::new($config, $logger)
    return $validator.ValidateAll()
}

function Test-SystemRequirements {
    $config = Get-DeployConfig
    $logger = Get-DeployLogger
    $validator = [DeployValidator]::new($config, $logger)

    $result = [ValidationResult]::new()
    $validator.ValidateSystemRequirements($result)
    return $result
}

function Test-ProjectStructure {
    $config = Get-DeployConfig
    $logger = Get-DeployLogger
    $validator = [DeployValidator]::new($config, $logger)

    $result = [ValidationResult]::new()
    $validator.ValidateProject($result)
    return $result
}

function Test-ServerConnection {
    $config = Get-DeployConfig
    $logger = Get-DeployLogger
    $validator = [DeployValidator]::new($config, $logger)

    $result = [ValidationResult]::new()
    $validator.ValidateServer($result)
    return $result
}

Export-ModuleMember -Function Test-DeployReadiness, Test-SystemRequirements, Test-ProjectStructure, Test-ServerConnection