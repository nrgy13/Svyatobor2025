# –ú–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–µ–ø–ª–æ—è
# –£–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è

class DeployConfig {
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    [string]$SSHHost
    [string]$SSHUser
    [string]$SSHKeyPath
    [string]$RemotePath

    # FTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
    [string]$FTPHost
    [string]$FTPUser
    [string]$FTPPass

    # –î–æ–º–µ–Ω—ã
    [string]$ProductionDomain
    [string]$StagingDomain

    # –ü—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
    [string]$ProjectRoot
    [string]$BuildDir
    [string]$BackupDir

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    [string]$LogLevel
    [string]$LogFile
    [int]$LogMaxSize

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    [bool]$BackupEnabled
    [int]$BackupRetentionDays
    [string]$BackupCompression

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    [bool]$DeployKeyEncryption
    [string[]]$AllowedBranches
    [bool]$RequireMFAForDeploy

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    [bool]$EnableCompression
    [bool]$CacheStaticAssets
    [bool]$CDNEnabled

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    [string]$HealthCheckURL
    [string]$MonitoringEmail

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    [string]$SlackWebhookURL
    [string]$TelegramBotToken
    [string]$TelegramChatID

    DeployConfig() {
        $this.ProjectRoot = $PSScriptRoot | Split-Path -Parent
        $this.BuildDir = "out"
        $this.BackupDir = "backup"
        $this.LogLevel = "info"
        $this.LogFile = "logs/deploy.log"
        $this.LogMaxSize = 10MB
        $this.BackupEnabled = $true
        $this.BackupRetentionDays = 30
        $this.BackupCompression = "gzip"
        $this.DeployKeyEncryption = $true
        $this.AllowedBranches = @("develop", "staging", "production")
        $this.RequireMFAForDeploy = $true
        $this.EnableCompression = $true
        $this.CacheStaticAssets = $true
        $this.CDNEnabled = $false
    }

    [void] LoadFromEnvFile([string]$envFile) {
        if (Test-Path $envFile) {
            Write-Host "üìã –ó–∞–≥—Ä—É–∂–∞—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ $envFile" -ForegroundColor Blue

            Get-Content $envFile | ForEach-Object {
                if ($_ -match '^([^=]+)=(.*)$') {
                    $key = $matches[1].Trim()
                    $value = $matches[2].Trim()

                    switch ($key) {
                        "SSH_HOST" { $this.SSHHost = $value }
                        "SSH_USER" { $this.SSHUser = $value }
                        "SSH_KEY_PATH" { $this.SSHKeyPath = $value }
                        "REMOTE_PATH" { $this.RemotePath = $value }
                        "FTP_HOST" { $this.FTPHost = $value }
                        "FTP_USER" { $this.FTPUser = $value }
                        "FTP_PASS" { $this.FTPPass = $value }
                        "PRODUCTION_DOMAIN" { $this.ProductionDomain = $value }
                        "STAGING_DOMAIN" { $this.StagingDomain = $value }
                        "LOG_LEVEL" { $this.LogLevel = $value }
                        "LOG_FILE" { $this.LogFile = $value }
                        "LOG_MAX_SIZE" { $this.LogMaxSize = $this.ParseSize($value) }
                        "BACKUP_ENABLED" { $this.BackupEnabled = $this.ParseBool($value) }
                        "BACKUP_RETENTION_DAYS" { $this.BackupRetentionDays = [int]$value }
                        "BACKUP_COMPRESSION" { $this.BackupCompression = $value }
                        "DEPLOY_KEY_ENCRYPTION" { $this.DeployKeyEncryption = $this.ParseBool($value) }
                        "REQUIRE_MFA_FOR_DEPLOY" { $this.RequireMFAForDeploy = $this.ParseBool($value) }
                        "ENABLE_COMPRESSION" { $this.EnableCompression = $this.ParseBool($value) }
                        "CACHE_STATIC_ASSETS" { $this.CacheStaticAssets = $this.ParseBool($value) }
                        "CDN_ENABLED" { $this.CDNEnabled = $this.ParseBool($value) }
                        "HEALTH_CHECK_URL" { $this.HealthCheckURL = $value }
                        "MONITORING_EMAIL" { $this.MonitoringEmail = $value }
                        "SLACK_WEBHOOK_URL" { $this.SlackWebhookURL = $value }
                        "TELEGRAM_BOT_TOKEN" { $this.TelegramBotToken = $value }
                        "TELEGRAM_CHAT_ID" { $this.TelegramChatID = $value }
                    }
                }
            }
        } else {
            Write-Warning "–§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è $envFile –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
    }

    [bool] ParseBool([string]$value) {
        return $value -eq "true" -or $value -eq "1"
    }

    [int] ParseSize([string]$sizeStr) {
        if ($sizeStr -match '(\d+)([KMGT]?B?)') {
            $size = [int]$matches[1]
            $unit = $matches[2]

            switch ($unit.ToUpper()) {
                "KB" { return $size * 1KB }
                "MB" { return $size * 1MB }
                "GB" { return $size * 1GB }
                "TB" { return $size * 1TB }
                default { return $size }
            }
        }
        return 1MB
    }

    [void] Validate() {
        $errors = @()

        if ([string]::IsNullOrEmpty($this.SSHHost)) {
            $errors += "SSH_HOST –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        }
        if ([string]::IsNullOrEmpty($this.SSHUser)) {
            $errors += "SSH_USER –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        }
        if ([string]::IsNullOrEmpty($this.RemotePath)) {
            $errors += "REMOTE_PATH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        }
        if ([string]::IsNullOrEmpty($this.ProductionDomain)) {
            $errors += "PRODUCTION_DOMAIN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        }

        if ($errors.Count -gt 0) {
            throw "–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:`n$($errors -join "`n")"
        }
    }

    [string] GetBackupPath([string]$environment) {
        $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
        return Join-Path $this.BackupDir "$environment`_$timestamp"
    }

    [string] GetLogPath() {
        $logDir = Split-Path $this.LogFile -Parent
        if ($logDir -and !(Test-Path $logDir)) {
            New-Item -ItemType Directory -Path $logDir -Force | Out-Null
        }
        return $this.LogFile
    }
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
$Global:DeployConfig = [DeployConfig]::new()

# –§—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è
function Get-DeployConfig {
    return $Global:DeployConfig
}

function Set-DeployConfig {
    param([DeployConfig]$Config)
    $Global:DeployConfig = $Config
}

function Load-DeployConfig {
    param([string]$Environment = "production")

    $envFile = ".env.deploy"
    if (!(Test-Path $envFile)) {
        $envFile = ".env"
    }

    $Global:DeployConfig.LoadFromEnvFile($envFile)
    $Global:DeployConfig.Validate()

    Write-Host "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è —Å—Ä–µ–¥—ã: $Environment" -ForegroundColor Green
}

Export-ModuleMember -Function Get-DeployConfig, Set-DeployConfig, Load-DeployConfig