# –ú–æ–¥—É–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –¥–µ–ø–ª–æ—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é

using module ".\config.psm1"
using module ".\logger.psm1"

function Test-DeployReadiness {
    $logger = Get-DeployLogger
    $logger.LogStep("–í–ê–õ–ò–î–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é")

    $result = @{
        IsValid = $true
        Errors = @()
        Warnings = @()
        Info = @()
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    Test-SystemRequirementsInternal -Result $result

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    Test-ConfigurationInternal -Result $result

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç
    Test-ProjectInternal -Result $result

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä–∫—É
    Test-BuildInternal -Result $result

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
    Test-ServerInternal -Result $result

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    Show-ValidationResults -Result $result

    return $result
}

function Test-SystemRequirementsInternal {
    param([hashtable]$Result)

    $logger = Get-DeployLogger
    $logger.Info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PowerShell –≤–µ—Ä—Å–∏–∏
    $psVersion = $PSVersionTable.PSVersion
    if ($psVersion.Major -lt 5) {
        $Result.IsValid = $false
        $Result.Errors += "–¢—Ä–µ–±—É–µ—Ç—Å—è PowerShell –≤–µ—Ä—Å–∏–∏ 5.0 –∏–ª–∏ –≤—ã—à–µ. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $($psVersion.Major).$($psVersion.Minor)"
    } else {
        $Result.Info += "‚úÖ PowerShell –≤–µ—Ä—Å–∏—è: $($psVersion.Major).$($psVersion.Minor)"
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è SSH –∫–ª–∏–µ–Ω—Ç–∞
    try {
        $sshTest = & ssh -V 2>$null
        if ($LASTEXITCODE -eq 0) {
            $Result.Info += "‚úÖ SSH –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω"
        } else {
            $Result.Warnings += "‚ö†Ô∏è SSH –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        }
    }
    catch {
        $Result.Warnings += "‚ö†Ô∏è SSH –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Git
    try {
        $gitTest = & git --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            $Result.Info += "‚úÖ Git –¥–æ—Å—Ç—É–ø–µ–Ω"
        } else {
            $Result.Warnings += "‚ö†Ô∏è Git –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
    }
    catch {
        $Result.Warnings += "‚ö†Ô∏è Git –Ω–µ –Ω–∞–π–¥–µ–Ω"
    }
}

function Test-ConfigurationInternal {
    param([hashtable]$Result)

    $logger = Get-DeployLogger
    $logger.Info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    $config = Get-DeployConfig

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env.deploy —Ñ–∞–π–ª–∞
    $envFile = ".env.deploy"
    if (Test-Path $envFile) {
        $Result.Info += "‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω: $envFile"
    } else {
        $Result.Warnings += "‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $envFile"
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if ([string]::IsNullOrEmpty($config.SSHHost)) {
        $Result.IsValid = $false
        $Result.Errors += "SSH_HOST –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    } else {
        $Result.Info += "‚úÖ SSH_HOST –Ω–∞—Å—Ç—Ä–æ–µ–Ω: $($config.SSHHost)"
    }

    if ([string]::IsNullOrEmpty($config.SSHUser)) {
        $Result.IsValid = $false
        $Result.Errors += "SSH_USER –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    } else {
        $Result.Info += "‚úÖ SSH_USER –Ω–∞—Å—Ç—Ä–æ–µ–Ω: $($config.SSHUser)"
    }

    if ([string]::IsNullOrEmpty($config.RemotePath)) {
        $Result.IsValid = $false
        $Result.Errors += "REMOTE_PATH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    } else {
        $Result.Info += "‚úÖ REMOTE_PATH –Ω–∞—Å—Ç—Ä–æ–µ–Ω: $($config.RemotePath)"
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞
    if ([string]::IsNullOrEmpty($config.ProductionDomain)) {
        $Result.IsValid = $false
        $Result.Errors += "PRODUCTION_DOMAIN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    } else {
        $Result.Info += "‚úÖ PRODUCTION_DOMAIN –Ω–∞—Å—Ç—Ä–æ–µ–Ω: $($config.ProductionDomain)"
    }
}

function Test-ProjectInternal {
    param([hashtable]$Result)

    $logger = Get-DeployLogger
    $logger.Info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è package.json
    if (Test-Path "package.json") {
        $Result.Info += "‚úÖ package.json –Ω–∞–π–¥–µ–Ω"
    } else {
        $Result.IsValid = $false
        $Result.Errors += "package.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è node_modules
    if (Test-Path "node_modules") {
        $Result.Info += "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (node_modules)"
    } else {
        $Result.Warnings += "‚ö†Ô∏è –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)"
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    if (Test-Path "images") {
        $imageCount = (Get-ChildItem "images" -File | Measure-Object).Count
        $Result.Info += "‚úÖ –ü–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–∞: $imageCount —Ñ–∞–π–ª–æ–≤"
    } else {
        $Result.Warnings += "‚ö†Ô∏è –ü–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞–ø–∫–∏ public/images
    if (Test-Path "public/images") {
        $publicImageCount = (Get-ChildItem "public/images" -File | Measure-Object).Count
        $Result.Info += "‚úÖ –ü–∞–ø–∫–∞ public/images –Ω–∞–π–¥–µ–Ω–∞: $publicImageCount —Ñ–∞–π–ª–æ–≤"
    } else {
        $Result.Warnings += "‚ö†Ô∏è –ü–∞–ø–∫–∞ public/images –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    }
}

function Test-BuildInternal {
    param([hashtable]$Result)

    $logger = Get-DeployLogger
    $logger.Info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞–ø–∫–∏ out
    if (Test-Path "out") {
        $buildItems = Get-ChildItem "out" -Recurse
        $fileCount = ($buildItems | Where-Object { !$_.PSIsContainer }).Count
        $totalSize = ($buildItems | Measure-Object -Property Length -Sum).Sum

        $Result.Info += "‚úÖ –ü–∞–ø–∫–∞ —Å–±–æ—Ä–∫–∏ –Ω–∞–π–¥–µ–Ω–∞: $fileCount —Ñ–∞–π–ª–æ–≤, $(FormatBytes $totalSize)"
    } else {
        $Result.Warnings += "‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å–±–æ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (out). –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–±–æ—Ä–∫—É –∫–æ–º–∞–Ω–¥–æ–π: npm run build"
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å–±–æ—Ä–∫–∏
    $criticalFiles = @("out/index.html", "out/404.html", "out/favicon.ico")
    foreach ($file in $criticalFiles) {
        if (Test-Path $file) {
            $fileSize = (Get-Item $file).Length
            $Result.Info += "‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: $(Split-Path $file -Leaf) ($(FormatBytes $fileSize))"
        } else {
            $Result.Warnings += "‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $(Split-Path $file -Leaf)"
        }
    }
}

function Test-ServerInternal {
    param([hashtable]$Result)

    $logger = Get-DeployLogger
    $logger.Info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...")

    $config = Get-DeployConfig

    if ([string]::IsNullOrEmpty($config.SSHHost) -or [string]::IsNullOrEmpty($config.SSHUser)) {
        $Result.Warnings += "‚ö†Ô∏è SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä–≤–µ—Ä–∞"
        return
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try {
        $sshTest = & ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "$($config.SSHUser)@$($config.SSHHost)" "echo 'SSH connection successful'" 2>$null
        if ($LASTEXITCODE -eq 0) {
            $Result.Info += "‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —Ä–∞–±–æ—Ç–∞–µ—Ç"
        } else {
            $Result.Warnings += "‚ö†Ô∏è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        }
    }
    catch {
        $Result.Warnings += "‚ö†Ô∏è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: $($_.Exception.Message)"
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –¥–æ–º–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if (![string]::IsNullOrEmpty($config.ProductionDomain)) {
        try {
            $webRequest = Invoke-WebRequest -Uri "https://$($config.ProductionDomain)" -TimeoutSec 10 -ErrorAction SilentlyContinue
            if ($webRequest.StatusCode -eq 200) {
                $Result.Info += "‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç (HTTP $($webRequest.StatusCode))"
            } else {
                $Result.Warnings += "‚ö†Ô∏è –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º $($webRequest.StatusCode)"
            }
        }
        catch {
            $Result.Warnings += "‚ö†Ô∏è –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $($_.Exception.Message)"
        }
    }
}

function FormatBytes([long]$bytes) {
    $units = "–ë", "–ö–ë", "–ú–ë", "–ì–ë", "–¢–ë"
    $i = 0

    while ($bytes -ge 1KB -and $i -lt 4) {
        $bytes = $bytes / 1KB
        $i++
    }

    return "{0:N1} {1}" -f $bytes, $units[$i]
}

function Show-ValidationResults {
    param([hashtable]$Result)

    $logger = Get-DeployLogger
    $logger.Info("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò")
    $logger.Info("===============================================")

    if ($Result.Info.Count -gt 0) {
        $logger.Info("‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        foreach ($info in $Result.Info) {
            $logger.Info("  $info")
        }
    }

    if ($Result.Warnings.Count -gt 0) {
        $logger.Warn("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        foreach ($warning in $Result.Warnings) {
            $logger.Warn("  $warning")
        }
    }

    if ($Result.Errors.Count -gt 0) {
        $logger.Error("‚ùå –û–®–ò–ë–ö–ò:")
        foreach ($errorMessage in $Result.Errors) {
            $logger.Error("  $errorMessage")
        }
    }

    $logger.Info("===============================================")

    if ($Result.IsValid) {
        $logger.LogSuccess("–í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–ô–î–ï–ù–ê", "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–ø–ª–æ—é")
    } else {
        $logger.LogError("–í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï –ü–†–û–ô–î–ï–ù–ê", "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
    }
}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
function Test-SystemRequirements {
    $result = @{
        IsValid = $true
        Errors = @()
        Warnings = @()
        Info = @()
    }

    Test-SystemRequirementsInternal -Result $result
    return $result
}

function Test-ProjectStructure {
    $result = @{
        IsValid = $true
        Errors = @()
        Warnings = @()
        Info = @()
    }

    Test-ProjectInternal -Result $result
    return $result
}

function Test-ServerConnection {
    $result = @{
        IsValid = $true
        Errors = @()
        Warnings = @()
        Info = @()
    }

    Test-ServerInternal -Result $result
    return $result
}

Export-ModuleMember -Function Test-DeployReadiness, Test-SystemRequirements, Test-ProjectStructure, Test-ServerConnection