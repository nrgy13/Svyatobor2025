# –ú–æ–¥—É–ª—å –¥–µ–ø–ª–æ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
# –°–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ–ø–ª–æ—è: —Å–±–æ—Ä–∫–∞, –∑–∞–≥—Ä—É–∑–∫–∞, —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

using module ".\config.psm1"
using module ".\logger.psm1"

class DeployResult {
    [bool]$Success
    [string]$Environment
    [string[]]$Actions
    [string[]]$Errors
    [string]$Duration
    [string]$Timestamp

    DeployResult() {
        $this.Success = $true
        $this.Actions = @()
        $this.Errors = @()
        $this.Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    }

    [void] AddAction([string]$action) {
        $this.Actions += $action
    }

    [void] AddError([string]$errorMessage) {
        $this.Success = $false
        $this.Errors += $errorMessage
    }
}

class Deployer {
    [DeployConfig]$Config
    [DeployLogger]$Logger
    [System.Diagnostics.Stopwatch]$Stopwatch

    Deployer([DeployConfig]$config, [DeployLogger]$logger) {
        $this.Config = $config
        $this.Logger = $logger
        $this.Stopwatch = [System.Diagnostics.Stopwatch]::new()
    }

    [DeployResult] Deploy([string]$environment) {
        $this.Logger.LogDeploymentStart($environment, "1.0.0")
        $this.Stopwatch.Start()

        $result = [DeployResult]::new()
        $result.Environment = $environment

        try {
            # –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
            $this.Logger.LogStep("–í–ê–õ–ò–î–ê–¶–ò–Ø", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é")
            $validationResult = $this.ValidateBeforeDeploy()
            if (!$validationResult.IsValid) {
                throw "–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º."
            }
            $result.AddAction("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

            # –®–∞–≥ 2: –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
            $this.Logger.LogStep("–°–ë–û–†–ö–ê", "–°–±–æ—Ä–∫–∞ Next.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            $buildResult = $this.BuildProject()
            if (!$buildResult) {
                throw "–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–Ω–æ"
            }
            $result.AddAction("–ü—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")

            # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
            if ($environment -eq "production" -and $this.Config.BackupEnabled) {
                $this.Logger.LogStep("–†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï", "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                $backupResult = $this.CreateBackup($environment)
                if ($backupResult) {
                    $result.AddAction("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backupResult")
                }
            }

            # –®–∞–≥ 4: –î–µ–ø–ª–æ–π —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            $this.Logger.LogStep("–î–ï–ü–õ–û–ô –§–ê–ô–õ–û–í", "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            $deployResult = $this.DeployFiles($environment)
            if (!$deployResult) {
                throw "–î–µ–ø–ª–æ–π —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ"
            }
            $result.AddAction("–§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ")

            # –®–∞–≥ 5: –î–µ–ø–ª–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            $this.Logger.LogStep("–î–ï–ü–õ–û–ô –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô", "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            $imagesResult = $this.DeployImages()
            if ($imagesResult) {
                $result.AddAction("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            } else {
                $result.AddAction("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            }

            # –®–∞–≥ 6: –ü–æ—Å—Ç-–¥–µ–ø–ª–æ–π –¥–µ–π—Å—Ç–≤–∏—è
            $this.Logger.LogStep("–ü–û–°–¢-–î–ï–ü–õ–û–ô", "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç-–¥–µ–ø–ª–æ–π–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")
            $postDeployResult = $this.PostDeployActions($environment)
            if ($postDeployResult) {
                $result.AddAction("–ü–æ—Å—Ç-–¥–µ–ø–ª–æ–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            }

            # –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–ª–æ—è
            $this.Logger.LogStep("–ü–†–û–í–ï–†–ö–ê", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–µ–ø–ª–æ—è")
            $healthCheckResult = $this.HealthCheck($environment)
            if ($healthCheckResult) {
                $result.AddAction("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            } else {
                $result.AddAction("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–¥–æ—Ä–æ–≤—å—è")
            }

            $result.AddAction("–î–µ–ø–ª–æ–π –≤ —Å—Ä–µ–¥—É $environment –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        }
        catch {
            $errorMessage = $_.Exception.Message
            $this.Logger.LogError("–î–ï–ü–õ–û–ô", $errorMessage)
            $result.AddError($errorMessage)
        }
        finally {
            $this.Stopwatch.Stop()
            $result.Duration = $this.FormatDuration($this.Stopwatch.Elapsed)

            if ($result.Success) {
                $this.Logger.LogDeploymentEnd($environment, "–£–°–ü–ï–•", $result.Duration)
            } else {
                $this.Logger.LogDeploymentEnd($environment, "–û–®–ò–ë–ö–ê", $result.Duration)
            }
        }

        return $result
    }

    [hashtable] ValidateBeforeDeploy() {
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        . ".\validator.ps1"

        $validationResult = Test-DeployReadiness

        return @{
            IsValid = $validationResult.IsValid
            Errors = $validationResult.Errors
            Warnings = $validationResult.Warnings
        }
    }

    [bool] BuildProject() {
        try {
            $this.Logger.Info("üì¶ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ —Å–±–æ—Ä–∫–∏
            if (Test-Path "out") {
                $this.Logger.Info("üóëÔ∏è –£–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–±–æ—Ä–∫—É...")
                Remove-Item "out" -Recurse -Force
            }

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±–æ—Ä–∫—É
            $this.Logger.Info("üî® –ó–∞–ø—É—Å–∫–∞—é –∫–æ–º–∞–Ω–¥—É —Å–±–æ—Ä–∫–∏: npm run build")
            $buildProcess = Start-Process "npm" -ArgumentList "run build" -NoNewWindow -Wait -PassThru

            if ($buildProcess.ExitCode -eq 0) {
                $this.Logger.LogSuccess("–°–ë–û–†–ö–ê –ü–†–û–ï–ö–¢–ê", "–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–±–æ—Ä–∫–∏
                $buildSize = $this.GetDirectorySize("out")
                $this.Logger.Info("üìä –†–∞–∑–º–µ—Ä —Å–±–æ—Ä–∫–∏: $(FormatBytes $buildSize)")

                return $true
            } else {
                $this.Logger.LogError("–°–ë–û–†–ö–ê –ü–†–û–ï–ö–¢–ê", "–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ $($buildProcess.ExitCode))")
                return $false
            }
        }
        catch {
            $this.Logger.LogError("–°–ë–û–†–ö–ê –ü–†–û–ï–ö–¢–ê", $_.Exception.Message)
            return $false
        }
    }

    [string] CreateBackup([string]$environment) {
        if (!$this.Config.BackupEnabled) {
            $this.Logger.Info("‚è≠Ô∏è –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return $null
        }

        try {
            $backupPath = $this.Config.GetBackupPath($environment)
            $this.Logger.Info("üíæ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤: $backupPath")

            # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å–±–æ—Ä–∫–∏
            if (Test-Path "out") {
                New-Item -ItemType Directory -Path $backupPath -Force | Out-Null
                Copy-Item "out\*" $backupPath -Recurse -Force
                $this.Logger.LogSuccess("–†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï", "–õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
                return $backupPath
            }

            return $null
        }
        catch {
            $this.Logger.LogError("–†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï", $_.Exception.Message)
            return $null
        }
    }

    [bool] DeployFiles([string]$environment) {
        try {
            $this.Logger.Info("üì§ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")

            if ([string]::IsNullOrEmpty($this.Config.SSHHost) -or [string]::IsNullOrEmpty($this.Config.SSHUser)) {
                throw "SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ"
            }

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º SSH –æ–ø—Ü–∏–∏
            $sshOptions = $this.GetSSHOptions()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ rsync
            $rsyncCommand = "rsync -avz --delete -e 'ssh $($sshOptions)' --exclude='.git' --exclude='node_modules' --exclude='.env*' out/ $($this.Config.SSHUser)@$($this.Config.SSHHost):$($this.Config.RemotePath)/"

            $this.Logger.Info("üîÑ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: $rsyncCommand")
            $rsyncProcess = Start-Process "bash" -ArgumentList "-c `"$rsyncCommand`"" -NoNewWindow -Wait -PassThru

            if ($rsyncProcess.ExitCode -eq 0) {
                $this.Logger.LogSuccess("–î–ï–ü–õ–û–ô –§–ê–ô–õ–û–í", "–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ SSH")
                return $true
            } else {
                $this.Logger.LogError("–î–ï–ü–õ–û–ô –§–ê–ô–õ–û–í", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤ (–∫–æ–¥ $($rsyncProcess.ExitCode))")
                return $false
            }
        }
        catch {
            $this.Logger.LogError("–î–ï–ü–õ–û–ô –§–ê–ô–õ–û–í", $_.Exception.Message)
            return $false
        }
    }

    [bool] DeployImages() {
        try {
            $this.Logger.Info("üñºÔ∏è –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")

            if ([string]::IsNullOrEmpty($this.Config.SSHHost) -or [string]::IsNullOrEmpty($this.Config.SSHUser)) {
                $this.Logger.LogWarning("–î–ï–ü–õ–û–ô –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô", "SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                return $false
            }

            $sshOptions = $this.GetSSHOptions()
            $totalImages = 0

            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            $this.Logger.Info("üìÅ –°–æ–∑–¥–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
            $mkdirCommand = "ssh $($sshOptions) $($this.Config.SSHUser)@$($this.Config.SSHHost) 'mkdir -p $($this.Config.RemotePath)/images $($this.Config.RemotePath)/public/images'"

            $mkdirProcess = Start-Process "bash" -ArgumentList "-c `"$mkdirCommand`"" -NoNewWindow -Wait -PassThru
            if ($mkdirProcess.ExitCode -ne 0) {
                $this.Logger.LogWarning("–î–ï–ü–õ–û–ô –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            }

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ images/
            if (Test-Path "images") {
                $this.Logger.Info("üì§ –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ images/...")
                $localImages = Get-ChildItem "images" -File
                $totalImages += $localImages.Count

                $rsyncImagesCommand = "rsync -avz -e 'ssh $($sshOptions)' --delete images/ $($this.Config.SSHUser)@$($this.Config.SSHHost):$($this.Config.RemotePath)/images/"

                $rsyncImagesProcess = Start-Process "bash" -ArgumentList "-c `"$rsyncImagesCommand`"" -NoNewWindow -Wait -PassThru

                if ($rsyncImagesProcess.ExitCode -eq 0) {
                    $this.Logger.LogSuccess("–î–ï–ü–õ–û–ô –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ images/ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                } else {
                    $this.Logger.LogWarning("–î–ï–ü–õ–û–ô –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ images/")
                }
            }

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ public/images/
            if (Test-Path "public/images") {
                $this.Logger.Info("üì§ –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ public/images/...")
                $publicImages = Get-ChildItem "public/images" -File
                $totalImages += $publicImages.Count

                $rsyncPublicImagesCommand = "rsync -avz -e 'ssh $($sshOptions)' --delete public/images/ $($this.Config.SSHUser)@$($this.Config.SSHHost):$($this.Config.RemotePath)/public/images/"

                $rsyncPublicImagesProcess = Start-Process "bash" -ArgumentList "-c `"$rsyncPublicImagesCommand`"" -NoNewWindow -Wait -PassThru

                if ($rsyncPublicImagesProcess.ExitCode -eq 0) {
                    $this.Logger.LogSuccess("–î–ï–ü–õ–û–ô –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ public/images/ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                } else {
                    $this.Logger.LogWarning("–î–ï–ü–õ–û–ô –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ public/images/")
                }
            }

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
            if ($totalImages -gt 0) {
                $this.Logger.Info("üîê –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º...")
                $chmodCommand = "ssh $($sshOptions) $($this.Config.SSHUser)@$($this.Config.SSHHost) 'chmod -R 755 $($this.Config.RemotePath)/images $($this.Config.RemotePath)/public/images'"

                $chmodProcess = Start-Process "bash" -ArgumentList "-c `"$chmodCommand`"" -NoNewWindow -Wait -PassThru

                if ($chmodProcess.ExitCode -eq 0) {
                    $this.Logger.LogSuccess("–î–ï–ü–õ–û–ô –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô", "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                } else {
                    $this.Logger.LogWarning("–î–ï–ü–õ–û–ô –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º")
                }
            }

            $this.Logger.Info("üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: $totalImages")
            return $totalImages -gt 0
        }
        catch {
            $this.Logger.LogError("–î–ï–ü–õ–û–ô –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô", $_.Exception.Message)
            return $false
        }
    }

    [bool] PostDeployActions([string]$environment) {
        try {
            $this.Logger.Info("üîÑ –í—ã–ø–æ–ª–Ω—è—é –ø–æ—Å—Ç-–¥–µ–ø–ª–æ–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è...")

            if ([string]::IsNullOrEmpty($this.Config.SSHHost) -or [string]::IsNullOrEmpty($this.Config.SSHUser)) {
                $this.Logger.LogWarning("–ü–û–°–¢-–î–ï–ü–õ–û–ô", "SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø–æ—Å—Ç-–¥–µ–ø–ª–æ–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
                return $false
            }

            $sshOptions = $this.GetSSHOptions()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é nginx –¥–ª—è Next.js
            $this.Logger.Info("‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é nginx –¥–ª—è Next.js...")
            $nginxConfigUploaded = $this.UploadNginxConfig()

            if ($nginxConfigUploaded) {
                $this.Logger.LogSuccess("–ü–û–°–¢-–î–ï–ü–õ–û–ô", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è nginx –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            } else {
                $this.Logger.LogWarning("–ü–û–°–¢-–î–ï–ü–õ–û–ô", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é nginx")
            }

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é nginx
            $nginxConfigApplied = $this.ApplyNginxConfig()

            if ($nginxConfigApplied) {
                $this.Logger.LogSuccess("–ü–û–°–¢-–î–ï–ü–õ–û–ô", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è nginx –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            } else {
                $this.Logger.LogWarning("–ü–û–°–¢-–î–ï–ü–õ–û–ô", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é nginx")
            }

            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
            $this.Logger.Info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –≤–µ–±-—Å–µ—Ä–≤–µ—Ä...")
            $restartCommand = "ssh $($sshOptions) $($this.Config.SSHUser)@$($this.Config.SSHHost) 'sudo systemctl restart nginx || sudo systemctl restart apache2 || sudo systemctl restart httpd || echo '–í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏–ª–∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç''"

            $restartProcess = Start-Process "bash" -ArgumentList "-c `"$restartCommand`"" -NoNewWindow -Wait -PassThru

            if ($restartProcess.ExitCode -eq 0) {
                $this.Logger.LogSuccess("–ü–û–°–¢-–î–ï–ü–õ–û–ô", "–í–µ–±-—Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            } else {
                $this.Logger.LogWarning("–ü–û–°–¢-–î–ï–ü–õ–û–ô", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
            $this.Logger.Info("üìä –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞...")
            $statusCommand = "ssh $($sshOptions) $($this.Config.SSHUser)@$($this.Config.SSHHost) 'sudo systemctl status nginx || sudo systemctl status apache2 || sudo systemctl status httpd || echo '–°–µ—Ä–≤–∏—Å—ã –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞:' && ps aux | grep -E '(nginx|apache|httpd)' | grep -v grep'"

            $statusProcess = Start-Process "bash" -ArgumentList "-c `"$statusCommand`"" -NoNewWindow -Wait -PassThru

            if ($statusProcess.ExitCode -eq 0) {
                $this.Logger.LogSuccess("–ü–û–°–¢-–î–ï–ü–õ–û–ô", "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω")
            }

            return $true
        }
        catch {
            $this.Logger.LogError("–ü–û–°–¢-–î–ï–ü–õ–û–ô", $_.Exception.Message)
            return $false
        }
    }

    [bool] UploadNginxConfig() {
        try {
            if (!(Test-Path "nginx-config.conf")) {
                $this.Logger.LogWarning("NGINX –ö–û–ù–§–ò–ì", "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx-config.conf –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return $false
            }

            $sshOptions = $this.GetSSHOptions()
            $remoteConfigPath = "/etc/nginx/sites-available/svyatobor"

            $this.Logger.Info("üì§ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é nginx –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
            $scpCommand = "scp $($sshOptions) nginx-config.conf $($this.Config.SSHUser)@$($this.Config.SSHHost):$remoteConfigPath"

            $scpProcess = Start-Process "bash" -ArgumentList "-c `"$scpCommand`"" -NoNewWindow -Wait -PassThru

            if ($scpProcess.ExitCode -eq 0) {
                $this.Logger.LogSuccess("NGINX –ö–û–ù–§–ò–ì", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return $true
            } else {
                $this.Logger.LogWarning("NGINX –ö–û–ù–§–ò–ì", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
                return $false
            }
        }
        catch {
            $this.Logger.LogError("NGINX –ö–û–ù–§–ò–ì", $_.Exception.Message)
            return $false
        }
    }

    [bool] ApplyNginxConfig() {
        try {
            $sshOptions = $this.GetSSHOptions()
            $remoteConfigPath = "/etc/nginx/sites-available/svyatobor"
            $enabledConfigPath = "/etc/nginx/sites-enabled/svyatobor"

            $this.Logger.Info("üîß –ü—Ä–∏–º–µ–Ω—è—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é nginx...")

            # –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É
            $lnCommand = "ssh $($sshOptions) $($this.Config.SSHUser)@$($this.Config.SSHHost) 'sudo ln -sf $remoteConfigPath $enabledConfigPath'"

            $lnProcess = Start-Process "bash" -ArgumentList "-c `"$lnCommand`"" -NoNewWindow -Wait -PassThru

            if ($lnProcess.ExitCode -eq 0) {
                $this.Logger.LogSuccess("NGINX –ö–û–ù–§–ò–ì", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return $true
            } else {
                $this.Logger.LogWarning("NGINX –ö–û–ù–§–ò–ì", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
                return $false
            }
        }
        catch {
            $this.Logger.LogError("NGINX –ö–û–ù–§–ò–ì", $_.Exception.Message)
            return $false
        }
    }

    [bool] HealthCheck([string]$environment) {
        try {
            $this.Logger.Info("üîç –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

            if ([string]::IsNullOrEmpty($this.Config.ProductionDomain)) {
                $this.Logger.LogWarning("–ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø", "PRODUCTION_DOMAIN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É")
                return $false
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
            $healthUrl = "https://$($this.Config.ProductionDomain)"
            $this.Logger.Info("üåê –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞: $healthUrl")

            try {
                $webRequest = Invoke-WebRequest -Uri $healthUrl -TimeoutSec 30 -ErrorAction SilentlyContinue
                if ($webRequest.StatusCode -eq 200) {
                    $this.Logger.LogSuccess("–ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø", "–°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $($webRequest.StatusCode))")
                    return $true
                } else {
                    $this.Logger.LogWarning("–ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø", "–°–∞–π—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º $($webRequest.StatusCode)")
                    return $false
                }
            }
            catch {
                $this.Logger.LogWarning("–ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø", "–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $($_.Exception.Message)")
                return $false
            }
        }
        catch {
            $this.Logger.LogError("–ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø", $_.Exception.Message)
            return $false
        }
    }

    [string] GetSSHOptions() {
        $options = @()

        if (![string]::IsNullOrEmpty($this.Config.SSHKeyPath) -and (Test-Path $this.Config.SSHKeyPath)) {
            $options += "-i '$($this.Config.SSHKeyPath)'"
        }

        $options += "-o StrictHostKeyChecking=no"
        $options += "-o UserKnownHostsFile=/dev/null"
        $options += "-o LogLevel=ERROR"

        return $options -join " "
    }

    [long] GetDirectorySize([string]$path) {
        if (!(Test-Path $path)) {
            return 0
        }

        $items = Get-ChildItem $path -Recurse
        $totalSize = ($items | Measure-Object -Property Length -Sum).Sum
        return $totalSize
    }

    [string] FormatDuration([TimeSpan]$duration) {
        return "{0:mm\:ss}" -f $duration
    }
}

# –§—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è
function Start-Deploy {
    param([string]$Environment = "production")

    $config = Get-DeployConfig
    $logger = Get-DeployLogger
    $deployer = [Deployer]::new($config, $logger)

    return $deployer.Deploy($Environment)
}

function Test-DeployConnection {
    $logger = Get-DeployLogger
    $logger.Info("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")

    $config = Get-DeployConfig

    if ([string]::IsNullOrEmpty($config.SSHHost) -or [string]::IsNullOrEmpty($config.SSHUser)) {
        Write-DeployError "–î–ï–ü–õ–û–ô" "SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ"
        return $false
    }

    try {
        $sshOptions = $config.GetSSHOptions()
        $testCommand = "ssh $($sshOptions) $($config.SSHUser)@$($config.SSHHost) 'echo '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ' && ls -la $($config.RemotePath)'"

        $testProcess = Start-Process "bash" -ArgumentList "-c `"$testCommand`"" -NoNewWindow -Wait -PassThru

        if ($testProcess.ExitCode -eq 0) {
            Write-DeploySuccess "–î–ï–ü–õ–û–ô" "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            return $true
        } else {
            Write-DeployError "–î–ï–ü–õ–û–ô" "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
            return $false
        }
    }
    catch {
        Write-DeployError "–î–ï–ü–õ–û–ô" $_.Exception.Message
        return $false
    }
}

Export-ModuleMember -Function Start-Deploy, Test-DeployConnection